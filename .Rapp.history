multi_integrated(init.Ns=5,thetas=1,Drs=0.5,rs=0.5,Gs=4,R0=500,nstep=100)
multi_integrated(init.Ns=5,thetas=1,Drs=0.5,rs=0.5,Gs=4,R0=500,nstep=200)
multi_integrated(init.Ns=5,thetas=1,Drs=0.5,rs=0.5,Gs=2,R0=500,nstep=200)
multi_integrated(init.Ns=5,thetas=1,Drs=0.5,rs=0.5,Gs=3,R0=500,nstep=200)
multi_integrated(init.Ns=5,thetas=1,Drs=0.5,rs=0.5,Gs=5,R0=500,nstep=200)
multi_integrated(init.Ns=5,thetas=1,Drs=0.5,rs=0.5,Gs=4,R0=500,nstep=200)
multi_integrated(init.Ns=5,thetas=1,Drs=0.5,rs=0.1,Gs=4,R0=500,nstep=200)
multi_integrated(init.Ns=5,thetas=1,Drs=0.5,rs=0.1,Gs=5,R0=500,nstep=200)
multi_integrated(init.Ns=5,thetas=1,Drs=0.5,rs=0.1,Gs=10,R0=500,nstep=200)
multi_integrated(init.Ns=5,thetas=1,Drs=0.5,rs=0.1,Gs=20,R0=500,nstep=200)
multi_integrated(init.Ns=5,thetas=1,Drs=0.5,rs=0.1,Gs=15,R0=500,nstep=200)
multi_integrated(init.Ns=5,thetas=1,Drs=0.5,rs=0.1,Gs=17,R0=500,nstep=200)
multi_integrated(init.Ns=5,thetas=1,Drs=0.5,rs=0.1,Gs=18,R0=500,nstep=200)
multi_integrated(init.Ns=5,thetas=1,Drs=0.5,rs=0.1,Gs=18,R0=500,nstep=500)
multi_integrated(init.Ns=5,thetas=1,Drs=0.5,rs=0.1,Gs=18,R0=500,nstep=1000)
multi_integrated(init.Ns=5,thetas=1,Drs=0.5,rs=0.1,Gs=18,R0=500,nstep=2000)
multi_integrated(init.Ns=5,thetas=1,Drs=0.5,rs=0.1,Gs=18,R0=500,nstep=5000)
multi_integrated(init.Ns=5,thetas=1,Drs=0.5,rs=0.1,Gs=18,R0=500,nstep=1000)
multi_integrated(init.Ns=5,thetas=1,Drs=0.5,rs=0.01,Gs=18,R0=500,nstep=1000)
multi_integrated(init.Ns=5,thetas=1,Drs=0.5,rs=0.2,Gs=18,R0=500,nstep=1000)
multi_integrated(init.Ns=5,thetas=1,Drs=0.5,rs=0.15,Gs=18,R0=500,nstep=1000)
multi_integrated(init.Ns=5,thetas=1,Drs=0.5,rs=0.1,Gs=18,R0=500,nstep=1000)
multi_integrated(init.Ns=5,thetas=1,Drs=0.5,rs=0.1,Gs=20,R0=500,nstep=1000)
multi_integrated(init.Ns=5,thetas=1,Drs=0.1,rs=0.1,Gs=20,R0=500,nstep=1000)
multi_integrated(init.Ns=5,thetas=1,Drs=0.1,rs=0.1,Gs=30,R0=500,nstep=1000)
multi_integrated(init.Ns=5,thetas=1,Drs=0.1,rs=0.1,Gs=40,R0=500,nstep=1000)
multi_integrated(init.Ns=5,thetas=1,Drs=0.1,rs=0.1,Gs=35,R0=500,nstep=1000)
multi_integrated(init.Ns=5,thetas=1,Drs=0.1,rs=0.1,Gs=30,R0=500,nstep=1000)
multi_integrated(init.Ns=5,thetas=1,Drs=0.1,rs=0.1,Gs=32,R0=500,nstep=1000)
multi_integrated(init.Ns=5,thetas=1,Drs=0.1,rs=1,Gs=3,R0=500,nstep=1000)
multi_integrated(init.Ns=5,thetas=1,Drs=0.1,rs=1,Gs=6,R0=500,nstep=1000)
multi_integrated(init.Ns=5,thetas=1,Drs=0.1,rs=1,Gs=5,R0=500,nstep=1000)
multi_integrated(init.Ns=5,thetas=1,Drs=0.1,rs=1,Gs=4,R0=500,nstep=1000)
multi_integrated(init.Ns=5,thetas=1,Drs=0,rs=1,Gs=4,R0=500,nstep=1000)
multi_integrated(init.Ns=5,thetas=1,Drs=0,rs=1,Gs=3,R0=500,nstep=1000)
multi_integrated(init.Ns=5,thetas=1,Drs=0,rs=1,Gs=5,R0=500,nstep=1000)
multi_integrated(init.Ns=5,thetas=1,Drs=0,rs=1,Gs=6,R0=500,nstep=1000)
multi_integrated(init.Ns=5,thetas=1,Drs=0,rs=1,Gs=5,R0=500,nstep=1000)
multi_integrated(init.Ns=5,thetas=1,Drs=1,rs=1,Gs=5,R0=500,nstep=1000)
multi_integrated(init.Ns=5,thetas=1,Drs=1,rs=1,Gs=3,R0=500,nstep=1000)
multi_integrated(init.Ns=5,thetas=1,Drs=0.5,rs=1,Gs=3,R0=500,nstep=1000)
multi_integrated(init.Ns=5,thetas=1,Drs=0.5,rs=0.1,Gs=10,R0=500,nstep=1000)
multi_integrated(init.Ns=5,thetas=1,Drs=0.5,rs=1,Gs=10,R0=500,nstep=1000)
multi_integrated(init.Ns=5,thetas=1,Drs=0.5,rs=0.5,Gs=10,R0=500,nstep=1000)
multi_integrated(init.Ns=5,thetas=1,Drs=0.5,rs=0.2,Gs=10,R0=500,nstep=1000)
multi_integrated(init.Ns=5,thetas=1,Drs=0.5,rs=0.1,Gs=10,R0=500,nstep=1000)
multi_integrated(init.Ns=5,thetas=1,Drs=0.5,rs=0.15,Gs=10,R0=500,nstep=1000)
multi_integrated(init.Ns=5,thetas=1,Drs=0.5,rs=0.1,Gs=20,R0=500,nstep=1000)
multi_integrated(init.Ns=5,thetas=1,Drs=0.5,rs=0.1,Gs=5,R0=500,nstep=1000)
multi_integrated(init.Ns=5,thetas=1,Drs=0.5,rs=0.5,Gs=5,R0=500,nstep=1000)
multi_integrated(init.Ns=5,thetas=1,Drs=0.5,rs=0.2,Gs=5,R0=500,nstep=1000)
multi_integrated(init.Ns=5,thetas=1,Drs=0.5,rs=0.3,Gs=5,R0=500,nstep=1000)
multi_integrated(init.Ns=5,thetas=1,Drs=0.1,rs=0.3,Gs=5,R0=500,nstep=1000)
multi_integrated(init.Ns=5,thetas=1,Drs=0.1,rs=0.3,Gs=10,R0=500,nstep=1000)
multi_integrated(init.Ns=5,thetas=1,Drs=0.1,rs=0.1,Gs=10,R0=500,nstep=1000)
multi_integrated(init.Ns=5,thetas=1,Drs=0.1,rs=0.1,Gs=10,R0=500,nstep=300)
multi_integrated(init.Ns=5,thetas=1,Drs=0.1,rs=0.1,Gs=10,R0=500,nstep=200)
multi_integrated(init.Ns=5,thetas=1,Drs=0.1,rs=0.3,Gs=10,R0=500,nstep=200)
multi_integrated(init.Ns=5,thetas=1,Drs=0.1,rs=0.3,Gs=10,R0=500,nstep=300)
multi_integrated(init.Ns=5,thetas=1,Drs=0.1,rs=0.5,Gs=10,R0=500,nstep=300)
multi_integrated(init.Ns=5,thetas=1,Drs=0.1,rs=0.4,Gs=10,R0=500,nstep=300)
multi_integrated(init.Ns=5,thetas=1,Drs=0.1,rs=0.3,Gs=10,R0=500,nstep=300)
multi_integrated(init.Ns=5,thetas=1,Drs=0.1,rs=0.35,Gs=10,R0=500,nstep=300)
multi_integrated(init.Ns=5,thetas=1,Drs=0.1,rs=0.35,Gs=10,R0=500,nstep=500)
multi_integrated(init.Ns=5,thetas=1,Drs=0.1,rs=0.4,Gs=10,R0=500,nstep=500)
multi_integrated(init.Ns=5,thetas=1,Drs=0.1,rs=0.4,Gs=5,R0=500,nstep=500)
multi_integrated(init.Ns=5,thetas=1,Drs=0,rs=0.4,Gs=5,R0=500,nstep=500)
multi_integrated(init.Ns=5,thetas=1,Drs=0,rs=0.4,Gs=10,R0=500,nstep=500)
multi_integrated(init.Ns=5,thetas=1,Drs=0,rs=0.4,Gs=12,R0=500,nstep=500)
multi_integrated(init.Ns=5,thetas=1,Drs=0,rs=0.4,Gs=10,R0=500,nstep=500)
multi_integrated(init.Ns=5,thetas=1,Drs=0,rs=0.5,Gs=10,R0=500,nstep=500)
multi_integrated(init.Ns=5,thetas=1,Drs=0,rs=0.4,Gs=10,R0=500,nstep=500)
multi_integrated(init.Ns=5,thetas=1,Drs=0,rs=0.3,Gs=10,R0=500,nstep=500)
multi_integrated(init.Ns=5,thetas=1,Drs=0,rs=0.2,Gs=10,R0=500,nstep=500)
multi_integrated(init.Ns=5,thetas=1,Drs=0,rs=0.1,Gs=10,R0=500,nstep=500)
par(mfrow=c(2,2))
multi_integrated(init.Ns=5,thetas=1,Drs=0,rs=0.1,Gs=10,R0=500,nstep=500)
multi_integrated(init.Ns=5,thetas=1,Drs=0,rs=0.2,Gs=10,R0=500,nstep=500)
multi_integrated(init.Ns=5,thetas=1,Drs=0,rs=0.3,Gs=10,R0=500,nstep=500)
multi_integrated(init.Ns=5,thetas=1,Drs=0,rs=0.4,Gs=10,R0=500,nstep=500)
multi_integrated(init.Ns=5,thetas=1,Drs=0,rs=1,Gs=1,R0=500,nstep=500)
multi_integrated(init.Ns=5,thetas=1,Drs=0,rs=2,Gs=1,R0=500,nstep=500)
multi_integrated(init.Ns=5,thetas=1,Drs=0,rs=3,Gs=1,R0=500,nstep=500)
multi_integrated(init.Ns=5,thetas=1,Drs=0,rs=4,Gs=1,R0=500,nstep=500)
multi_integrated(init.Ns=5,thetas=1,Drs=0,rs=1,Gs=1,R0=500,nstep=50)
multi_integrated(init.Ns=5,thetas=1,Drs=0,rs=2,Gs=1,R0=500,nstep=50)
multi_integrated(init.Ns=5,thetas=1,Drs=0,rs=3,Gs=1,R0=500,nstep=50)
multi_integrated(init.Ns=5,thetas=1,Drs=0,rs=4,Gs=1,R0=500,nstep=50)
multi_integrated(init.Ns=5,thetas=1,Drs=0,rs=0.1,Gs=10,R0=500,nstep=50)
multi_integrated(init.Ns=5,thetas=1,Drs=0,rs=0.1,Gs=10,R0=500,nstep=500)
multi_integrated(init.Ns=5,thetas=1,Drs=0.1,rs=0.1,Gs=10,R0=500,nstep=500)
multi_integrated(init.Ns=5,thetas=1,Drs=0.5,rs=0.1,Gs=10,R0=500,nstep=500)
multi_integrated(init.Ns=5,thetas=1,Drs=0.7,rs=0.1,Gs=10,R0=500,nstep=500)
multi_integrated(init.Ns=5,thetas=1,Drs=0.6,rs=0.1,Gs=10,R0=500,nstep=500)
multi_integrated(init.Ns=5,thetas=1,Drs=0.65,rs=0.1,Gs=10,R0=500,nstep=500)
multi_integrated(init.Ns=5,thetas=1,Drs=0.5,rs=0.3,Gs=10,R0=500,nstep=500)
multi_integrated(init.Ns=5,thetas=1,Drs=0.5,rs=0.2,Gs=10,R0=500,nstep=500)
multi_integrated(init.Ns=5,thetas=1,Drs=0.5,rs=0.1,Gs=10,R0=500,nstep=500)
multi_integrated(init.Ns=5,thetas=1,Drs=0.7,rs=0.1,Gs=10,R0=500,nstep=500)
multi_integrated(init.Ns=5,thetas=1,Drs=0.7,rs=0.1,Gs=10,R0=500,nstep=300)
multi_integrated(init.Ns=5,thetas=1,Drs=0.7,rs=0.1,Gs=10,R0=500,nstep=200)
multi_integrated(init.Ns=5,thetas=1,Drs=0.7,rs=0.1,Gs=10,R0=500,nstep=300)
multi_integrated(init.Ns=5,thetas=1,Drs=0.65,rs=0.1,Gs=10,R0=500,nstep=300)
multi_integrated(init.Ns=5,thetas=1,Drs=0.65,rs=0.1,Gs=10,R0=500,nstep=500)
multi_integrated(init.Ns=5,thetas=1,Drs=0.65,rs=0.1,Gs=10,R0=500,nstep=1000)
library(nleqslv)#
#
multi_predator_1prey <- function(inits,thetas,Drs,rs,Gs,R0,nstep){#
	Nseq <- matrix(nrow=nstep,ncol=length(thetas))#
	Nseq[1,] <- inits#
	for(t in 2:nstep){#
		clocks <- cumu_growths <- rep(0,length=length(thetas))#
		cumu_growths[-1] <- cumu_growths[-1] + multi_growth(Nseq[t-1,-1],thetas[-1],Drs[-1],rs[-1],Nseq[t-1,1]*thetas[1])#
		cumu_growths[1] <- multi_growth(Nseq[t-1,1],thetas[1],Drs[1],rs[1],R0)- sum(Nseq[t-1,-1]*thetas[-1])/thetas[1]#lag in predation#
		clocks <- clocks+1#
		for(sp in 1:length(thetas)){#
			if(clocks[sp]<Gs[sp]){#during the current generation, abundance doesn't change#
				Nseq[t,sp] <- Nseq[t-1,sp]#
			}else{#when the current generation ends, update abundance and reset clock and cumulated growth#
				Nseq[t,sp] <- Nseq[t-1,sp]+cumu_growths[sp]#
				clocks[sp] <- 0#
				cumu_growths[sp] <- 0#
			}#
		}		#
	}#
#
	time <- 1: nstep#
	plot(Nseq[,1]~time,col=1,ylim=range(Nseq),ylab="abundance")#
	lines(time,Nseq[,1],col=1)#
	for(i in 2:dim(Nseq)[2]){#
		points(time,Nseq[,i],col=i)#
		lines(time,Nseq[,i],col=i)#
	}#
	#legend("bottomright",c("prey",paste("predator",1:(dim(Nseq)[2]-1))),col=1:length(thetas),pch=1,lty=1)#
	Nseq#
}#
#
multi_integrated <- function(init.Ns0,thetas,Drs,rs,Gs,R0,nstep){#
	Nseq <- matrix(nrow=nstep,ncol=length(thetas))#
	Nseq[1,] <- init.Ns0#
	clocks <- cumu_growths <- rep(0,length=length(thetas))#
	for(i in 2:nstep){#
		cumu_growths <- cumu_growths + multi_growth(Nseq[i-1,],thetas,Drs,rs,R0)#
		clocks <- clocks+1#
		for(sp in 1:length(thetas)){#
			if(clocks[sp]<Gs[sp]){#during the current generation, abundance doesn't change#
				Nseq[i,sp] <- Nseq[i-1,sp]#
			}else{#when the current generation ends, update abundance and reset clock and cumulated growth#
				Nseq[i,sp] <- Nseq[i-1,sp]+cumu_growths[sp]#
				clocks[sp] <- 0#
				cumu_growths[sp] <- 0#
			}#
		}#
	}#
	time <- 1:nstep#
	for(sp in 1:length(Drs)){#
		if(sp==1){#
			plot(Nseq[,sp]~time,col=sp+1,ylim=range(Nseq),ylab="abundance",xlab=paste("time (Dr=",mean(Drs),")"))#
		}else{#
			points(time,Nseq[,sp],col=sp+1)#
		}#
		lines(time,Nseq[,sp],col=sp+1)#
	}#
	Nseq#
}#
#
multi_growth <- function(Ns,thetas,Drs,rs,R0){#
	Cs <- (rs+1)*Ns*thetas#
	NDs <- Ns^Drs#
	Rs.init <- NDs/sum(NDs)*R0*sum(Cs)/(R0+sum(Cs))#
	Rs <- nleqslv(Rs.init,dynamic_constraints,NDs=NDs,Cs=Cs,R0=R0)#
	if(Rs[[3]]!=1){#
		print(Rs[[4]])#
	}#
	Rs <- Rs[[1]]#
	Rs/thetas-Ns#
}#
#
dynamic_constraints <- function(Rs,NDs,Cs,R0){#
	Rs^2 - (Cs-Rs)*(R0-sum(Rs))*NDs#
}
par(mfrow=c(2,2))
multi_integrated(init.Ns=5,thetas=1,Drs=0,rs=0.1,Gs=10,R0=500,nstep=1000)
multi_integrated(init.Ns=5,thetas=1,Drs=0.3,rs=0.1,Gs=10,R0=500,nstep=1000)
multi_integrated(init.Ns=5,thetas=1,Drs=0.5,rs=0.1,Gs=10,R0=500,nstep=1000)
multi_integrated(init.Ns=5,thetas=1,Drs=0.5,rs=0.1,Gs=10,R0=500,nstep=100)
multi_integrated(init.Ns=5,thetas=1,Drs=0.1,rs=0.1,Gs=10,R0=500,nstep=200)
multi_integrated(init.Ns=5,thetas=1,Drs=0.3,rs=0.1,Gs=10,R0=500,nstep=200)
multi_integrated(init.Ns=5,thetas=1,Drs=0.5,rs=0.1,Gs=10,R0=500,nstep=200)
multi_integrated(init.Ns=5,thetas=1,Drs=0.65,rs=0.1,Gs=10,R0=500,nstep=1000)
multi_integrated(init.Ns=5,thetas=1,Drs=0.67,rs=0.1,Gs=10,R0=500,nstep=1000)
multi_integrated(init.Ns=5,thetas=1,Drs=0.68,rs=0.1,Gs=10,R0=500,nstep=1000)
multi_integrated(init.Ns=5,thetas=1,Drs=0.69,rs=0.1,Gs=10,R0=500,nstep=1000)
multi_integrated(init.Ns=5,thetas=1,Drs=0.1,rs=0.1,Gs=10,R0=500,nstep=1000)
par(mfrow=c(2,2))
multi_integrated(init.Ns=5,thetas=1,Drs=0.1,rs=0.1,Gs=10,R0=500,nstep=100)
par(mfrow=c(2,2))
multi_integrated(init.Ns=5,thetas=1,Drs=0.1,rs=0.1,Gs=10,R0=500,nstep=200)
multi_integrated(init.Ns=5,thetas=1,Drs=0.3,rs=0.1,Gs=10,R0=500,nstep=200)
multi_integrated(init.Ns=5,thetas=1,Drs=0.5,rs=0.1,Gs=10,R0=500,nstep=200)
multi_integrated(init.Ns=5,thetas=1,Drs=0.69,rs=0.1,Gs=10,R0=500,nstep=1000)
multi_integrated(init.Ns=5,thetas=1,Drs=0.1,rs=0.1,Gs=10,R0=500,nstep=200)
multi_integrated(init.Ns=5,thetas=1,Drs=0.5,rs=0.1,Gs=10,R0=500,nstep=200)
multi_integrated(init.Ns=5,thetas=1,Drs=0.6,rs=0.1,Gs=10,R0=500,nstep=1000)
multi_integrated(init.Ns=5,thetas=1,Drs=0.69,rs=0.1,Gs=10,R0=500,nstep=1000)
library(nleqslv)#
#
multi_predator_1prey <- function(inits,thetas,Drs,rs,Gs,R0,nstep){#
	Nseq <- matrix(nrow=nstep,ncol=length(thetas))#
	Nseq[1,] <- inits#
	for(t in 2:nstep){#
		clocks <- cumu_growths <- rep(0,length=length(thetas))#
		cumu_growths[-1] <- cumu_growths[-1] + multi_growth(Nseq[t-1,-1],thetas[-1],Drs[-1],rs[-1],Nseq[t-1,1]*thetas[1])#
		cumu_growths[1] <- multi_growth(Nseq[t-1,1],thetas[1],Drs[1],rs[1],R0)- sum(Nseq[t-1,-1]*thetas[-1])/thetas[1]#lag in predation#
		clocks <- clocks+1#
		for(sp in 1:length(thetas)){#
			if(clocks[sp]<Gs[sp]){#during the current generation, abundance doesn't change#
				Nseq[t,sp] <- Nseq[t-1,sp]#
			}else{#when the current generation ends, update abundance and reset clock and cumulated growth#
				Nseq[t,sp] <- Nseq[t-1,sp]+cumu_growths[sp]#
				clocks[sp] <- 0#
				cumu_growths[sp] <- 0#
			}#
		}		#
	}#
#
	time <- 1: nstep#
	plot(Nseq[,1]~time,col=1,ylim=range(Nseq),ylab="abundance")#
	lines(time,Nseq[,1],col=1)#
	for(i in 2:dim(Nseq)[2]){#
		points(time,Nseq[,i],col=i)#
		lines(time,Nseq[,i],col=i)#
	}#
	#legend("bottomright",c("prey",paste("predator",1:(dim(Nseq)[2]-1))),col=1:length(thetas),pch=1,lty=1)#
	Nseq#
}#
#
multi_integrated <- function(init.Ns0,thetas,Drs,rs,Gs,R0,nstep){#
	Nseq <- matrix(nrow=nstep,ncol=length(thetas))#
	Nseq[1,] <- init.Ns0#
	clocks <- cumu_growths <- rep(0,length=length(thetas))#
	for(i in 2:nstep){#
		cumu_growths <- cumu_growths + multi_growth(Nseq[i-1,],thetas,Drs,rs,R0)#
		clocks <- clocks+1#
		for(sp in 1:length(thetas)){#
			if(clocks[sp]<Gs[sp]){#during the current generation, abundance doesn't change#
				Nseq[i,sp] <- Nseq[i-1,sp]#
			}else{#when the current generation ends, update abundance and reset clock and cumulated growth#
				Nseq[i,sp] <- Nseq[i-1,sp]+cumu_growths[sp]#
				clocks[sp] <- 0#
				cumu_growths[sp] <- 0#
			}#
		}#
	}#
	time <- 1:nstep#
	for(sp in 1:length(Drs)){#
		if(sp==1){#
			plot(Nseq[,sp]~time,col=sp+1,ylim=range(Nseq),ylab="abundance",xlab=paste("time (Dr=",mean(Drs),")"))#
		}else{#
			points(time,Nseq[,sp],col=sp+1)#
		}#
		lines(time,Nseq[,sp],col=sp+1)#
	}#
	Nseq#
}#
#
multi_growth <- function(Ns,thetas,Drs,rs,R0){#
	Cs <- (rs+1)*Ns*thetas#
	NDs <- Ns^Drs#
	Rs.init <- NDs/sum(NDs)*R0*sum(Cs)/(R0+sum(Cs))#
	Rs <- nleqslv(Rs.init,dynamic_constraints,NDs=NDs,Cs=Cs,R0=R0)#
	if(Rs[[3]]!=1){#
		print(Rs[[4]])#
	}#
	Rs <- Rs[[1]]#
	Rs/thetas-Ns#
}#
#
dynamic_constraints <- function(Rs,NDs,Cs,R0){#
	Rs^2 - (Cs-Rs)*(R0-sum(Rs))*NDs#
}
multi_integrated(init.Ns=5,thetas=1,Drs=0,rs=0.1,Gs=10,R0=500,nstep=500)
multi_integrated(init.Ns=5,thetas=1,Drs=0,rs=0.2,Gs=10,R0=500,nstep=500)
multi_integrated(init.Ns=5,thetas=1,Drs=0,rs=0.3,Gs=10,R0=500,nstep=500)
multi_integrated(init.Ns=5,thetas=1,Drs=0,rs=0.4,Gs=10,R0=500,nstep=500)
multi_integrated(init.Ns=5,thetas=1,Drs=0,rs=4,Gs=1,R0=500,nstep=50)
multi_integrated(init.Ns=5,thetas=1,Drs=0,rs=3,Gs=1,R0=500,nstep=50)
multi_integrated(init.Ns=5,thetas=1,Drs=0,rs=2,Gs=1,R0=500,nstep=50)
multi_integrated(init.Ns=5,thetas=1,Drs=0,rs=1,Gs=1,R0=500,nstep=50)
library(nleqslv)#
#
test_continuity <- function(init.Ns0,I_thetas,Drs,I_rs,Gs=1,I_R0,nstep,dt_seq){#
	for(i in 1:length(dt_seq)){#
		Nseq <- cross_time(init.Ns0,I_thetas,Drs,I_rs,Gs=1,I_R0,nstep,dt_seq[i])#
		plot_dynamics(Nseq,"dt",dt_seq[i],pch=i,new=(i==1))#
	}#
}#
#
cross_time <- function(init.Ns0,I_thetas,Drs,I_rs,Gs=1,I_R0,nstep,dt){#
	R0 <- I_R0*dt#
	thetas <- I_thetas*dt#
	rs <- exp(I_rs*dt) ##transfer into discrete growth rates#
	Nmat <- multi_integrated(init.Ns0,thetas,Drs,rs,Gs,R0,nstep,F)#
	Nmat #
}#
#
multi_integrated <- function(init.Ns0,thetas,Drs,rs,Gs,R0,nstep,graph=T){#
	Nseq <- matrix(nrow=nstep,ncol=length(thetas))#
	Nseq[1,] <- init.Ns0#
	clocks <- cumu_growths <- rep(0,length=length(thetas))#
	for(i in 2:nstep){#
		cumu_growths <- cumu_growths + multi_growth(Nseq[i-1,],thetas,Drs,rs,R0)#
		clocks <- clocks+1#
		for(sp in 1:length(thetas)){#
			if(clocks[sp]<Gs[sp]){#during the current generation, abundance doesn't change#
				Nseq[i,sp] <- Nseq[i-1,sp]#
			}else{#when the current generation ends, update abundance and reset clock and cumulated growth#
				Nseq[i,sp] <- Nseq[i-1,sp]+cumu_growths[sp]#
				clocks[sp] <- 0#
				cumu_growths[sp] <- 0#
			}#
		}#
	}#
	if(graph){#
		plot_dynamics(Nseq,"Dr",mean(Drs),1)#
	}#
	Nseq#
}#
#
plot_dynamics <- function(Nseq,xlab,values,pch,new=T){#
	time <- 1:dim(Nseq)[1]#
	for(sp in 1:dim(Nseq)[2]){#
		if(sp==1&new){#
			plot(Nseq[,sp]~time,col=sp+1,ylim=range(Nseq),ylab="abundance",xlab=paste("time (",xlab,"=",values,")",sep=""),pch=pch)#
		}else{#
			points(time,Nseq[,sp],col=sp+1,pch=pch)#
		}#
		lines(time,Nseq[,sp],col=sp+1)#
	}#
#
}#
#
multi_growth <- function(Ns,thetas,Drs,rs,R0){#
	Cs <- (rs+1)*Ns*thetas#
	NDs <- Ns^Drs#
	Rs.init <- NDs/sum(NDs)*R0*sum(Cs)/(R0+sum(Cs))#
	Rs <- nleqslv(Rs.init,dynamic_constraints,NDs=NDs,Cs=Cs,R0=R0)#
	if(Rs[[3]]!=1){#
		print(Rs[[4]])#
	}#
	Rs <- Rs[[1]]#
	Rs/thetas-Ns#
}#
#
dynamic_constraints <- function(Rs,NDs,Cs,R0){#
	Rs^2 - (Cs-Rs)*(R0-sum(Rs))*NDs#
}#
#
multi_predator_1prey <- function(inits,thetas,Drs,rs,Gs,R0,nstep){#
	Nseq <- matrix(nrow=nstep,ncol=length(thetas))#
	Nseq[1,] <- inits#
	for(t in 2:nstep){#
		clocks <- cumu_growths <- rep(0,length=length(thetas))#
		cumu_growths[-1] <- cumu_growths[-1] + multi_growth(Nseq[t-1,-1],thetas[-1],Drs[-1],rs[-1],Nseq[t-1,1]*thetas[1])#
		cumu_growths[1] <- multi_growth(Nseq[t-1,1],thetas[1],Drs[1],rs[1],R0)- sum(Nseq[t-1,-1]*thetas[-1])/thetas[1]#lag in predation#
		clocks <- clocks+1#
		for(sp in 1:length(thetas)){#
			if(clocks[sp]<Gs[sp]){#during the current generation, abundance doesn't change#
				Nseq[t,sp] <- Nseq[t-1,sp]#
			}else{#when the current generation ends, update abundance and reset clock and cumulated growth#
				Nseq[t,sp] <- Nseq[t-1,sp]+cumu_growths[sp]#
				clocks[sp] <- 0#
				cumu_growths[sp] <- 0#
			}#
		}		#
	}#
#
	time <- 1: nstep#
	plot(Nseq[,1]~time,col=1,ylim=range(Nseq),ylab="abundance")#
	lines(time,Nseq[,1],col=1)#
	for(i in 2:dim(Nseq)[2]){#
		points(time,Nseq[,i],col=i)#
		lines(time,Nseq[,i],col=i)#
	}#
	#legend("bottomright",c("prey",paste("predator",1:(dim(Nseq)[2]-1))),col=1:length(thetas),pch=1,lty=1)#
	Nseq#
}
multi_integrated(init.Ns=5,thetas=1,Drs=0,rs=1,Gs=1,R0=500,nstep=50)
cross_time <- function(init.Ns0,I_thetas,Drs,I_rs,Gs=1,I_R0,nstep,dt){#
	R0 <- I_R0*dt#
	thetas <- I_thetas*dt#
	rs <- exp(I_rs*dt)-1 ##transfer into discrete growth rates#
	Nmat <- multi_integrated(init.Ns0,thetas,Drs,rs,Gs,R0,nstep,F)#
	Nmat #
}
init.Ns=5#
thetas=1#
Drs=0#
rs = 1#
R0=500#
nstep = 50#
dt = 0.1
library(nleqslv)#
#
test_continuity <- function(init.Ns0,I_thetas,Drs,I_rs,Gs=1,I_R0,nstep,dt_seq){#
	for(i in 1:length(dt_seq)){#
		Nseq <- cross_time(init.Ns0,I_thetas,Drs,I_rs,Gs=1,I_R0,nstep,dt_seq[i])#
		plot_dynamics(Nseq,"dt",dt_seq[i],pch=i,new=(i==1))#
	}#
}#
#
cross_time <- function(init.Ns0,I_thetas,Drs,I_rs,Gs=1,I_R0,nstep,dt){#
	R0 <- I_R0*dt#
	thetas <- I_thetas*dt#
	rs <- exp(I_rs*dt)-1 ##transfer into discrete growth rates#
	Nmat <- multi_integrated(init.Ns0,thetas,Drs,rs,Gs,R0,nstep,F)#
	Nmat #
}#
#
multi_integrated <- function(init.Ns0,thetas,Drs,rs,Gs,R0,nstep,graph=T){#
	Nseq <- matrix(nrow=nstep,ncol=length(thetas))#
	Nseq[1,] <- init.Ns0#
	clocks <- cumu_growths <- rep(0,length=length(thetas))#
	for(i in 2:nstep){#
		cumu_growths <- cumu_growths + multi_growth(Nseq[i-1,],thetas,Drs,rs,R0)#
		clocks <- clocks+1#
		for(sp in 1:length(thetas)){#
			if(clocks[sp]<Gs[sp]){#during the current generation, abundance doesn't change#
				Nseq[i,sp] <- Nseq[i-1,sp]#
			}else{#when the current generation ends, update abundance and reset clock and cumulated growth#
				Nseq[i,sp] <- Nseq[i-1,sp]+cumu_growths[sp]#
				clocks[sp] <- 0#
				cumu_growths[sp] <- 0#
			}#
		}#
	}#
	if(graph){#
		plot_dynamics(Nseq,"Dr",mean(Drs),1)#
	}#
	Nseq#
}#
#
plot_dynamics <- function(Nseq,xlab,values,pch,new=T){#
	time <- 1:dim(Nseq)[1]#
	for(sp in 1:dim(Nseq)[2]){#
		if(sp==1&new){#
			plot(Nseq[,sp]~time,col=sp+1,ylim=range(Nseq),ylab="abundance",xlab=paste("time (",xlab,"=",values,")",sep=""),pch=pch)#
		}else{#
			points(time,Nseq[,sp],col=sp+1,pch=pch)#
		}#
		lines(time,Nseq[,sp],col=sp+1)#
	}#
#
}#
#
multi_growth <- function(Ns,thetas,Drs,rs,R0){#
	Cs <- (rs+1)*Ns*thetas#
	NDs <- Ns^Drs#
	Rs.init <- NDs/sum(NDs)*R0*sum(Cs)/(R0+sum(Cs))#
	Rs <- nleqslv(Rs.init,dynamic_constraints,NDs=NDs,Cs=Cs,R0=R0)#
	if(Rs[[3]]!=1){#
		print(Rs[[4]])#
	}#
	Rs <- Rs[[1]]#
	Rs/thetas-Ns#
}#
#
dynamic_constraints <- function(Rs,NDs,Cs,R0){#
	Rs^2 - (Cs-Rs)*(R0-sum(Rs))*NDs#
}#
#
multi_predator_1prey <- function(inits,thetas,Drs,rs,Gs,R0,nstep){#
	Nseq <- matrix(nrow=nstep,ncol=length(thetas))#
	Nseq[1,] <- inits#
	for(t in 2:nstep){#
		clocks <- cumu_growths <- rep(0,length=length(thetas))#
		cumu_growths[-1] <- cumu_growths[-1] + multi_growth(Nseq[t-1,-1],thetas[-1],Drs[-1],rs[-1],Nseq[t-1,1]*thetas[1])#
		cumu_growths[1] <- multi_growth(Nseq[t-1,1],thetas[1],Drs[1],rs[1],R0)- sum(Nseq[t-1,-1]*thetas[-1])/thetas[1]#lag in predation#
		clocks <- clocks+1#
		for(sp in 1:length(thetas)){#
			if(clocks[sp]<Gs[sp]){#during the current generation, abundance doesn't change#
				Nseq[t,sp] <- Nseq[t-1,sp]#
			}else{#when the current generation ends, update abundance and reset clock and cumulated growth#
				Nseq[t,sp] <- Nseq[t-1,sp]+cumu_growths[sp]#
				clocks[sp] <- 0#
				cumu_growths[sp] <- 0#
			}#
		}		#
	}#
#
	time <- 1: nstep#
	plot(Nseq[,1]~time,col=1,ylim=range(Nseq),ylab="abundance")#
	lines(time,Nseq[,1],col=1)#
	for(i in 2:dim(Nseq)[2]){#
		points(time,Nseq[,i],col=i)#
		lines(time,Nseq[,i],col=i)#
	}#
	#legend("bottomright",c("prey",paste("predator",1:(dim(Nseq)[2]-1))),col=1:length(thetas),pch=1,lty=1)#
	Nseq#
}
dt = 1
cross_time <- function(init.Ns0,I_thetas,Drs,I_rs,Gs=1,I_R0,nstep,dt,graph){
library(nleqslv)#
#
test_continuity <- function(init.Ns0,I_thetas,Drs,I_rs,Gs=1,I_R0,nstep,dt_seq){#
	for(i in 1:length(dt_seq)){#
		Nseq <- cross_time(init.Ns0,I_thetas,Drs,I_rs,Gs=1,I_R0,nstep,dt_seq[i])#
		plot_dynamics(Nseq,"dt",dt_seq[i],pch=i,new=(i==1))#
	}#
}#
#
cross_time <- function(init.Ns0,I_thetas,Drs,I_rs,Gs=1,I_R0,nstep,dt,graph){#
	R0 <- I_R0*dt#
	thetas <- I_thetas*dt#
	rs <- exp(I_rs*dt)-1 ##transfer into discrete growth rates#
	Nmat <- multi_integrated(init.Ns0,thetas,Drs,rs,Gs,R0,nstep,graph)#
	Nmat #
}#
#
multi_integrated <- function(init.Ns0,thetas,Drs,rs,Gs,R0,nstep,graph=T){#
	Nseq <- matrix(nrow=nstep,ncol=length(thetas))#
	Nseq[1,] <- init.Ns0#
	clocks <- cumu_growths <- rep(0,length=length(thetas))#
	for(i in 2:nstep){#
		cumu_growths <- cumu_growths + multi_growth(Nseq[i-1,],thetas,Drs,rs,R0)#
		clocks <- clocks+1#
		for(sp in 1:length(thetas)){#
			if(clocks[sp]<Gs[sp]){#during the current generation, abundance doesn't change#
				Nseq[i,sp] <- Nseq[i-1,sp]#
			}else{#when the current generation ends, update abundance and reset clock and cumulated growth#
				Nseq[i,sp] <- Nseq[i-1,sp]+cumu_growths[sp]#
				clocks[sp] <- 0#
				cumu_growths[sp] <- 0#
			}#
		}#
	}#
	if(graph){#
		plot_dynamics(Nseq,"Dr",mean(Drs),1)#
	}#
	Nseq#
}#
#
plot_dynamics <- function(Nseq,xlab,values,pch,new=T){#
	time <- 1:dim(Nseq)[1]#
	for(sp in 1:dim(Nseq)[2]){#
		if(sp==1&new){#
			plot(Nseq[,sp]~time,col=sp+1,ylim=range(Nseq),ylab="abundance",xlab=paste("time (",xlab,"=",values,")",sep=""),pch=pch)#
		}else{#
			points(time,Nseq[,sp],col=sp+1,pch=pch)#
		}#
		lines(time,Nseq[,sp],col=sp+1)#
	}#
#
}#
#
multi_growth <- function(Ns,thetas,Drs,rs,R0){#
	Cs <- (rs+1)*Ns*thetas#
	NDs <- Ns^Drs#
	Rs.init <- NDs/sum(NDs)*R0*sum(Cs)/(R0+sum(Cs))#
	Rs <- nleqslv(Rs.init,dynamic_constraints,NDs=NDs,Cs=Cs,R0=R0)#
	if(Rs[[3]]!=1){#
		print(Rs[[4]])#
	}#
	Rs <- Rs[[1]]#
	Rs/thetas-Ns#
}#
#
dynamic_constraints <- function(Rs,NDs,Cs,R0){#
	Rs^2 - (Cs-Rs)*(R0-sum(Rs))*NDs#
}#
#
multi_predator_1prey <- function(inits,thetas,Drs,rs,Gs,R0,nstep){#
	Nseq <- matrix(nrow=nstep,ncol=length(thetas))#
	Nseq[1,] <- inits#
	for(t in 2:nstep){#
		clocks <- cumu_growths <- rep(0,length=length(thetas))#
		cumu_growths[-1] <- cumu_growths[-1] + multi_growth(Nseq[t-1,-1],thetas[-1],Drs[-1],rs[-1],Nseq[t-1,1]*thetas[1])#
		cumu_growths[1] <- multi_growth(Nseq[t-1,1],thetas[1],Drs[1],rs[1],R0)- sum(Nseq[t-1,-1]*thetas[-1])/thetas[1]#lag in predation#
		clocks <- clocks+1#
		for(sp in 1:length(thetas)){#
			if(clocks[sp]<Gs[sp]){#during the current generation, abundance doesn't change#
				Nseq[t,sp] <- Nseq[t-1,sp]#
			}else{#when the current generation ends, update abundance and reset clock and cumulated growth#
				Nseq[t,sp] <- Nseq[t-1,sp]+cumu_growths[sp]#
				clocks[sp] <- 0#
				cumu_growths[sp] <- 0#
			}#
		}		#
	}#
#
	time <- 1: nstep#
	plot(Nseq[,1]~time,col=1,ylim=range(Nseq),ylab="abundance")#
	lines(time,Nseq[,1],col=1)#
	for(i in 2:dim(Nseq)[2]){#
		points(time,Nseq[,i],col=i)#
		lines(time,Nseq[,i],col=i)#
	}#
	#legend("bottomright",c("prey",paste("predator",1:(dim(Nseq)[2]-1))),col=1:length(thetas),pch=1,lty=1)#
	Nseq#
}
cross_time(init.Ns0=init.Ns,I_thetas=thetas/dt,Drs=Drs,I_rs=log(1+rs)/dt,Gs=1,I_R0=R0/dt,nstep=nstep,dt=dt)
cross_time(init.Ns0=init.Ns,I_thetas=thetas/dt,Drs=Drs,I_rs=log(1+rs)/dt,Gs=1,I_R0=R0/dt,nstep=nstep,dt=dt,graph=T)
cross_time(init.Ns0=init.Ns,I_thetas=thetas/dt,Drs=Drs,I_rs=log(1+rs)/dt,Gs=1,I_R0=R0/dt,nstep=nstep,dt=dt,graph=T)
dt = 0.5
cross_time(init.Ns0=init.Ns,I_thetas=thetas/dt,Drs=Drs,I_rs=log(1+rs)/dt,Gs=1,I_R0=R0/dt,nstep=nstep,dt=dt,graph=T)
dt
dt = 0.1
cross_time(init.Ns0=init.Ns,I_thetas=thetas/dt,Drs=Drs,I_rs=log(1+rs)/dt,Gs=1,I_R0=R0/dt,nstep=nstep,dt=dt,graph=T)
Drs=0.2
cross_time(init.Ns0=init.Ns,I_thetas=thetas/dt,Drs=Drs,I_rs=log(1+rs)/dt,Gs=1,I_R0=R0/dt,nstep=nstep,dt=dt,graph=T)
dt = 1
cross_time(init.Ns0=init.Ns,I_thetas=thetas/dt,Drs=Drs,I_rs=log(1+rs)/dt,Gs=1,I_R0=R0/dt,nstep=nstep,dt=dt,graph=T)
library(nleqslv)#
#
test_continuity <- function(init.Ns0,I_thetas,Drs,I_rs,Gs=1,I_R0,nstep,dt_seq){#
	for(i in 1:length(dt_seq)){#
		Nseq <- cross_time(init.Ns0,I_thetas,Drs,I_rs,Gs=1,I_R0,nstep,dt_seq[i])#
		plot_dynamics(Nseq,dt,"dt",dt_seq[i],pch=i,new=(i==1))#
	}#
}#
#
cross_time <- function(init.Ns0,I_thetas,Drs,I_rs,Gs=1,I_R0,nstep,dt,graph){#
	R0 <- I_R0*dt#
	thetas <- I_thetas*dt#
	rs <- exp(I_rs*dt)-1 ##transfer into discrete growth rates#
	Nmat <- multi_integrated(init.Ns0,thetas,Drs,rs,Gs,R0,nstep,dt,graph)#
	Nmat #
}#
#
multi_integrated <- function(init.Ns0,thetas,Drs,rs,Gs,R0,nstep,dt,graph=T){#
	Nseq <- matrix(nrow=nstep,ncol=length(thetas))#
	Nseq[1,] <- init.Ns0#
	clocks <- cumu_growths <- rep(0,length=length(thetas))#
	for(i in 2:nstep){#
		cumu_growths <- cumu_growths + multi_growth(Nseq[i-1,],thetas,Drs,rs,R0)#
		clocks <- clocks+1#
		for(sp in 1:length(thetas)){#
			if(clocks[sp]<Gs[sp]){#during the current generation, abundance doesn't change#
				Nseq[i,sp] <- Nseq[i-1,sp]#
			}else{#when the current generation ends, update abundance and reset clock and cumulated growth#
				Nseq[i,sp] <- Nseq[i-1,sp]+cumu_growths[sp]#
				clocks[sp] <- 0#
				cumu_growths[sp] <- 0#
			}#
		}#
	}#
	if(graph){#
		plot_dynamics(Nseq,dt,"Dr",mean(Drs),1)#
	}#
	Nseq#
}#
#
plot_dynamics <- function(Nseq,dt,xlab,values,pch,new=T){#
	time <- 1:dim(Nseq)[1]*dt#
	for(sp in 1:dim(Nseq)[2]){#
		if(sp==1&new){#
			plot(Nseq[,sp]~time,col=sp+1,ylim=range(Nseq),ylab="abundance",xlab=paste("time (",xlab,"=",values,")",sep=""),pch=pch)#
		}else{#
			points(time,Nseq[,sp],col=sp+1,pch=pch)#
		}#
		lines(time,Nseq[,sp],col=sp+1)#
	}#
#
}#
#
multi_growth <- function(Ns,thetas,Drs,rs,R0){#
	Cs <- (rs+1)*Ns*thetas#
	NDs <- Ns^Drs#
	Rs.init <- NDs/sum(NDs)*R0*sum(Cs)/(R0+sum(Cs))#
	Rs <- nleqslv(Rs.init,dynamic_constraints,NDs=NDs,Cs=Cs,R0=R0)#
	if(Rs[[3]]!=1){#
		print(Rs[[4]])#
	}#
	Rs <- Rs[[1]]#
	Rs/thetas-Ns#
}#
#
dynamic_constraints <- function(Rs,NDs,Cs,R0){#
	Rs^2 - (Cs-Rs)*(R0-sum(Rs))*NDs#
}#
#
multi_predator_1prey <- function(inits,thetas,Drs,rs,Gs,R0,nstep){#
	Nseq <- matrix(nrow=nstep,ncol=length(thetas))#
	Nseq[1,] <- inits#
	for(t in 2:nstep){#
		clocks <- cumu_growths <- rep(0,length=length(thetas))#
		cumu_growths[-1] <- cumu_growths[-1] + multi_growth(Nseq[t-1,-1],thetas[-1],Drs[-1],rs[-1],Nseq[t-1,1]*thetas[1])#
		cumu_growths[1] <- multi_growth(Nseq[t-1,1],thetas[1],Drs[1],rs[1],R0)- sum(Nseq[t-1,-1]*thetas[-1])/thetas[1]#lag in predation#
		clocks <- clocks+1#
		for(sp in 1:length(thetas)){#
			if(clocks[sp]<Gs[sp]){#during the current generation, abundance doesn't change#
				Nseq[t,sp] <- Nseq[t-1,sp]#
			}else{#when the current generation ends, update abundance and reset clock and cumulated growth#
				Nseq[t,sp] <- Nseq[t-1,sp]+cumu_growths[sp]#
				clocks[sp] <- 0#
				cumu_growths[sp] <- 0#
			}#
		}		#
	}#
#
	time <- 1: nstep#
	plot(Nseq[,1]~time,col=1,ylim=range(Nseq),ylab="abundance")#
	lines(time,Nseq[,1],col=1)#
	for(i in 2:dim(Nseq)[2]){#
		points(time,Nseq[,i],col=i)#
		lines(time,Nseq[,i],col=i)#
	}#
	#legend("bottomright",c("prey",paste("predator",1:(dim(Nseq)[2]-1))),col=1:length(thetas),pch=1,lty=1)#
	Nseq#
}
cross_time(init.Ns0=init.Ns,I_thetas=thetas/dt,Drs=Drs,I_rs=log(1+rs)/dt,Gs=1,I_R0=R0/dt,nstep=nstep,dt=dt,graph=T)
dt
dt = 0.1
cross_time(init.Ns0=init.Ns,I_thetas=thetas/dt,Drs=Drs,I_rs=log(1+rs)/dt,Gs=1,I_R0=R0/dt,nstep=nstep,dt=dt,graph=T)
dt
R0 <- I_R0*dt
init.Ns0=init.Ns
I_thetas=thetas/dt
I_rs=log(1+rs)/dt
I_R0=R0/dt
R0 <- I_R0*dt
thetas <- I_thetas*dt
rs <- exp(I_rs*dt)-1 ##transfer into discrete growth rates
rs
thetas
R0
I_thetas
I_R0
dt
Nmat <- multi_integrated(init.Ns0,thetas,Drs,rs,Gs,R0,nstep,dt,graph)
Gs=1
Nmat <- multi_integrated(init.Ns0,thetas,Drs,rs,Gs,R0,nstep,dt,graph)
graph=T
Nmat <- multi_integrated(init.Ns0,thetas,Drs,rs,Gs,R0,nstep,dt,graph)
I_rs
library(nleqslv)#
#
test_continuity <- function(init.Ns0,I_thetas,Drs,I_rs,Gs=1,I_R0,nstep,dt_seq){#
	for(i in 1:length(dt_seq)){#
		Nseq <- cross_time(init.Ns0,I_thetas,Drs,I_rs,Gs=1,I_R0,nstep,dt_seq[i])#
		plot_dynamics(Nseq,dt,"dt",dt_seq[i],pch=i,new=(i==1))#
	}#
}#
#
cross_time <- function(init.Ns0,I_thetas,Drs,I_rs,Gs=1,I_R0,nstep,dt,graph){#
	R0 <- I_R0*dt#
	thetas <- I_thetas*dt#
	rs <- exp(I_rs*dt)-1 ##transfer into discrete growth rates#
	Nmat <- multi_integrated(init.Ns0,thetas,Drs,rs,Gs,R0,nstep,dt,graph)#
	Nmat #
}#
#
multi_integrated <- function(init.Ns0,thetas,Drs,rs,Gs,R0,nstep,dt,graph=T){#
	Nseq <- matrix(nrow=nstep,ncol=length(thetas))#
	Nseq[1,] <- init.Ns0#
	clocks <- cumu_growths <- rep(0,length=length(thetas))#
	for(i in 2:nstep){#
		cumu_growths <- cumu_growths + multi_growth(Nseq[i-1,],thetas,Drs,rs,R0)#
		clocks <- clocks+1#
		for(sp in 1:length(thetas)){#
			if(clocks[sp]<Gs[sp]){#during the current generation, abundance doesn't change#
				Nseq[i,sp] <- Nseq[i-1,sp]#
			}else{#when the current generation ends, update abundance and reset clock and cumulated growth#
				Nseq[i,sp] <- Nseq[i-1,sp]+cumu_growths[sp]#
				clocks[sp] <- 0#
				cumu_growths[sp] <- 0#
			}#
		}#
	}#
	if(graph){#
		plot_dynamics(Nseq,dt,"Dr",mean(Drs),1)#
	}#
	Nseq#
}#
#
plot_dynamics <- function(Nseq,dt,xlab,values,pch,new=T){#
	time <- 1:dim(Nseq)[1]*dt#
	for(sp in 1:dim(Nseq)[2]){#
		if(sp==1&new){#
			plot(Nseq[,sp]~time,col=sp+1,ylim=range(Nseq),ylab="abundance",xlab=paste("time (",xlab,"=",values,")",sep=""),pch=pch)#
		}else{#
			points(time,Nseq[,sp],col=sp+1,pch=pch)#
		}#
		lines(time,Nseq[,sp],col=sp+1)#
	}#
#
}#
#
multi_growth <- function(Ns,thetas,Drs,rs,R0){#
	Cs <- (rs+1)*Ns*thetas#
	NDs <- Ns^Drs#
	Rs.init <- NDs/sum(NDs)*R0*sum(Cs)/(R0+sum(Cs))#
	Rs <- nleqslv(Rs.init,dynamic_constraints,NDs=NDs,Cs=Cs,R0=R0)#
	if(Rs[[3]]!=1){#
		print(Rs[[4]])#
	}#
	Rs <- Rs[[1]]#
	Rs/thetas-Ns#
}#
#
dynamic_constraints <- function(Rs,NDs,Cs,R0){#
	Rs^2 - (Cs-Rs)*(R0-sum(Rs))*NDs#
}#
#
multi_predator_1prey <- function(inits,thetas,Drs,rs,Gs,R0,nstep){#
	Nseq <- matrix(nrow=nstep,ncol=length(thetas))#
	Nseq[1,] <- inits#
	for(t in 2:nstep){#
		clocks <- cumu_growths <- rep(0,length=length(thetas))#
		cumu_growths[-1] <- cumu_growths[-1] + multi_growth(Nseq[t-1,-1],thetas[-1],Drs[-1],rs[-1],Nseq[t-1,1]*thetas[1])#
		cumu_growths[1] <- multi_growth(Nseq[t-1,1],thetas[1],Drs[1],rs[1],R0)- sum(Nseq[t-1,-1]*thetas[-1])/thetas[1]#lag in predation#
		clocks <- clocks+1#
		for(sp in 1:length(thetas)){#
			if(clocks[sp]<Gs[sp]){#during the current generation, abundance doesn't change#
				Nseq[t,sp] <- Nseq[t-1,sp]#
			}else{#when the current generation ends, update abundance and reset clock and cumulated growth#
				Nseq[t,sp] <- Nseq[t-1,sp]+cumu_growths[sp]#
				clocks[sp] <- 0#
				cumu_growths[sp] <- 0#
			}#
		}		#
	}#
#
	time <- 1: nstep#
	plot(Nseq[,1]~time,col=1,ylim=range(Nseq),ylab="abundance")#
	lines(time,Nseq[,1],col=1)#
	for(i in 2:dim(Nseq)[2]){#
		points(time,Nseq[,i],col=i)#
		lines(time,Nseq[,i],col=i)#
	}#
	#legend("bottomright",c("prey",paste("predator",1:(dim(Nseq)[2]-1))),col=1:length(thetas),pch=1,lty=1)#
	Nseq#
}
init.Ns=5#
Drs=0.2#
#
#parameter values when dt=1#
thetas=1#
rs = 1#
R0=500
I_thetas=thetas#
I_rs=log(1+rs)#
I_R0=R0
I_rs
nstep = 50
dt = 1
cross_time(init.Ns0=init.Ns,I_thetas=I_thetas,Drs=Drs,I_rs=I_rs,Gs=1,I_R0=I_R0,nstep=nstep,dt=dt,graph=T)
dt = 0.1
cross_time(init.Ns0=init.Ns,I_thetas=I_thetas,Drs=Drs,I_rs=I_rs,Gs=1,I_R0=I_R0,nstep=nstep,dt=dt,graph=T)
nstep = 500
cross_time(init.Ns0=init.Ns,I_thetas=I_thetas,Drs=Drs,I_rs=I_rs,Gs=1,I_R0=I_R0,nstep=nstep,dt=dt,graph=T)
nstep = 200
cross_time(init.Ns0=init.Ns,I_thetas=I_thetas,Drs=Drs,I_rs=I_rs,Gs=1,I_R0=I_R0,nstep=nstep,dt=dt,graph=T)
test_continuity <- function(init.Ns0,I_thetas,Drs,I_rs,Gs=1,I_R0,dt_seq){#
	for(i in 1:length(dt_seq)){#
		Nseq <- cross_time(init.Ns0,I_thetas,Drs,I_rs,Gs=1,I_R0,round(50/dt_seq[i]),dt_seq[i])#
		plot_dynamics(Nseq,dt,"dt",dt_seq[i],pch=i,new=(i==1))#
	}#
}
dt_seq = c(0.1,0.5,1)
test_continuity(init.Ns,I_thetas,Drs,I_rs,Gs=1,I_R0,dt_seq)
test_continuity <- function(init.Ns0,I_thetas,Drs,I_rs,Gs=1,I_R0,dt_seq){#
	for(i in 1:length(dt_seq)){#
		Nseq <- cross_time(init.Ns0,I_thetas,Drs,I_rs,Gs=1,I_R0,round(50/dt_seq[i]),dt_seq[i],F)#
		plot_dynamics(Nseq,dt,"dt",dt_seq[i],pch=i,new=(i==1))#
	}#
}
test_continuity(init.Ns,I_thetas,Drs,I_rs,Gs=1,I_R0,dt_seq)
dt
dt=1
cross_time(init.Ns0=init.Ns,I_thetas=I_thetas,Drs=Drs,I_rs=I_rs,Gs=1,I_R0=I_R0,nstep=nstep,dt=dt,graph=T)
nstep
nstep=50
cross_time(init.Ns0=init.Ns,I_thetas=I_thetas,Drs=Drs,I_rs=I_rs,Gs=1,I_R0=I_R0,nstep=nstep,dt=dt,graph=T)
dt=0.1
nstep=500
cross_time(init.Ns0=init.Ns,I_thetas=I_thetas,Drs=Drs,I_rs=I_rs,Gs=1,I_R0=I_R0,nstep=nstep,dt=dt,graph=T)
#transform into instant values#
I_thetas
thetas
I_R0
I_rs
exp(I_rs)
exp(I_rs*0.1)-1
dt
R0 <- I_R0*dt
thetas <- I_thetas*dt
rs <- exp(I_rs*dt)-1 ##transfer into discrete growth rates
R0
thetas
rs
Nmat <- multi_integrated(init.Ns0,thetas,Drs,rs,Gs,R0,nstep,dt,graph)
graph
Nmat <- multi_integrated(init.Ns0,thetas,Drs,rs,Gs,R0,nstep,dt,graph)
dt=0.01
R0 <- I_R0*dt
thetas <- I_thetas*dt
rs <- exp(I_rs*dt)-1 ##transfer into discrete growth rates
Nmat <- multi_integrated(init.Ns0,thetas,Drs,rs,Gs,R0,nstep,dt,graph)
rs
R0
theta
thetas
Drs=0
R0 <- I_R0*dt#
	thetas <- I_thetas*dt#
	rs <- exp(I_rs*dt)-1 ##transfer into discrete growth rates#
	Nmat <- multi_integrated(init.Ns0,thetas,Drs,rs,Gs,R0,nstep,dt,graph)
nstep=5000
R0 <- I_R0*dt#
	thetas <- I_thetas*dt#
	rs <- exp(I_rs*dt)-1 ##transfer into discrete growth rates#
	Nmat <- multi_integrated(init.Ns0,thetas,Drs,rs,Gs,R0,nstep,dt,graph)
dt = 1
cross_time(init.Ns0=init.Ns,I_thetas=I_thetas,Drs=Drs,I_rs=I_rs,Gs=1,I_R0=I_R0,nstep=nstep,dt=dt,graph=T)
nstep=50
cross_time(init.Ns0=init.Ns,I_thetas=I_thetas,Drs=Drs,I_rs=I_rs,Gs=1,I_R0=I_R0,nstep=nstep,dt=dt,graph=T)
dt = 2
cross_time(init.Ns0=init.Ns,I_thetas=I_thetas,Drs=Drs,I_rs=I_rs,Gs=1,I_R0=I_R0,nstep=nstep,dt=dt,graph=T)
rs <- exp(I_rs*dt)-1
rs
Drs

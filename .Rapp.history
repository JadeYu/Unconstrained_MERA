library(nleqslv)#
#
multi_competitor <- function(init.Ns,rs,thetas,Drs,R0,nstep){#
	Nseq <- matrix(ncol=length(Drs),nrow=nstep)#
	for(t in 2:nstep){#
		Nseq[t,] <- multiple_growth(init.Ns,rs,thetas,Drs,R0)#
	}#
	time <- 1:nstep#
	for(sp in 1:length(Drs)){#
		if(sp==1){#
			plot(Nseq[,sp]~time,col=sp+1,ylim=range(Nseq))#
		}else{#
			points(time,Nseq[,sp],col=sp+1)#
		}#
	}#
	Nseq#
}#
#
multiple_growth <- function(init.Ns,rs,thetas,Drs,R0){#
	Rm <- sum((rs+1)*init.Ns*thetas)#
	Rr <- Rm*R0/(Rm+R0)#
	solve.MERA(thetas,Drs,R0)#
}#
#
solve.MERA <- function(thetas,Drs,R0){#
	C <- get.C(thetas,Drs,R0) #
	(C*thetas)^(1/(Drs-1))#
}#
#
get.C <- function(thetas,Drs,R0){#
	init.C <- (R0/sum(thetas^(Drs/(Drs-1))))^(mean(Drs)-1)#
	C <- nleqslv(init.C,constraint,thetas=thetas,Drs=Drs,R0=R0)#
	if(C[[3]]!=1){#
		print(C[[4]])#
	}#
	C[[1]]#
} #
#
constraint <- function(C,thetas,Drs,R0){#
	R0 - sum(C^(1/(Drs-1))*thetas^(Drs/(Drs-1)))#
}
init.Ns <- c(1,1,2)#
rs <- c(0.1,0.5,0.1)#
thetas <- c(1,1,1)#
Drs <- c(0,0,0)#
R0 <- 100#
nstep <- 20
multi_competitor(init.Ns,rs,thetas,Drs,R0,nstep)
Nseq <- matrix(ncol=length(Drs),nrow=nstep)
for(t in 2:nstep){#
		Nseq[t,] <- multiple_growth(init.Ns,rs,thetas,Drs,R0)#
	}
Nseq
Nseq <- matrix(ncol=length(Drs),nrow=nstep)#
	Nseq[1,] <- init.Ns#
	for(t in 2:nstep){#
		Nseq[t,] <- multiple_growth(Nseq[t-1,],rs,thetas,Drs,R0)#
	}
Nseq
Rm <- sum((rs+1)*init.Ns*thetas)
Rm
Rr <- Rm*R0/(Rm+R0)
Rr
solve.MERA(thetas,Drs,Rr)
multiple_growth <- function(init.Ns,rs,thetas,Drs,R0){#
	Rm <- sum((rs+1)*init.Ns*thetas)#
	Rr <- Rm*R0/(Rm+R0)#
	solve.MERA(thetas,Drs,Rr)#
}
Nseq <- matrix(ncol=length(Drs),nrow=nstep)#
	Nseq[1,] <- init.Ns#
	for(t in 2:nstep){#
		Nseq[t,] <- multiple_growth(Nseq[t-1,],rs,thetas,Drs,R0)#
	}
Nseq
multi_competitor <- function(init.Ns,rs,thetas,Drs,R0,nstep){#
	Nseq <- matrix(ncol=length(Drs),nrow=nstep)#
	Nseq[1,] <- init.Ns#
	for(t in 2:nstep){#
		Nseq[t,] <- multiple_growth(Nseq[t-1,],rs,thetas,Drs,R0)#
	}#
	time <- 1:nstep#
	for(sp in 1:length(Drs)){#
		if(sp==1){#
			plot(Nseq[,sp]~time,col=sp+1,ylim=range(Nseq))#
		}else{#
			points(time,Nseq[,sp],col=sp+1)#
		}#
	}#
	Nseq#
}
multi_competitor(init.Ns,rs,thetas,Drs,R0,nstep)
multi_competitor <- function(init.Ns,rs,thetas,Drs,R0,nstep){#
	Nseq <- matrix(ncol=length(Drs),nrow=nstep)#
	Nseq[1,] <- init.Ns#
	for(t in 2:nstep){#
		Nseq[t,] <- update(Nseq[t-1,],rs,thetas,Drs,R0)#
	}#
	time <- 1:nstep#
	for(sp in 1:length(Drs)){#
		if(sp==1){#
			plot(Nseq[,sp]~time,col=sp+1,ylim=range(Nseq))#
		}else{#
			points(time,Nseq[,sp],col=sp+1)#
		}#
	}#
	Nseq#
}#
#
update <- function(init.Ns,rs,thetas,Drs,R0){#
	Rm <- sum((rs+1)*init.Ns*thetas)#
	Rr <- Rm*R0/(Rm+R0)#
	gs <- MERA.growth(init.Ns,thetas,Drs,Rr)#
	Ns*(1+gs)#
}#
#
MERA.growth <- function(Ns,thetas,Drs,R0){## growth function #
	PR <- Ns^Drs#
	(R0 * PR/sum(PR)/thetas - Ns)/Ns#
}
Nseq <- matrix(ncol=length(Drs),nrow=nstep)#
	Nseq[1,] <- init.Ns#
	for(t in 2:nstep){#
		Nseq[t,] <- update(Nseq[t-1,],rs,thetas,Drs,R0)#
	}
update <- function(init.Ns,rs,thetas,Drs,R0){#
	Rm <- sum((rs+1)*init.Ns*thetas)#
	Rr <- Rm*R0/(Rm+R0)#
	gs <- MERA.growth(init.Ns,thetas,Drs,Rr)#
	init.Ns*(1+gs)#
}
Nseq <- matrix(ncol=length(Drs),nrow=nstep)#
	Nseq[1,] <- init.Ns#
	for(t in 2:nstep){#
		Nseq[t,] <- update(Nseq[t-1,],rs,thetas,Drs,R0)#
	}
Nseq
init.Ns
gs <- MERA.growth(init.Ns,thetas,Drs,Rr)
init.Ns*(1+gs)
gs
Ns = init.Ns
Drs
PR <- Ns^Drs
PR
R0 * PR/sum(PR)/thetas
Rm <- sum((rs+1)*init.Ns*thetas)
Rm
Rr <- Rm*R0/(Rm+R0)
Rr
(Rr * PR/sum(PR)/thetas - Ns)/Ns
thetas
multi_competitor <- function(init.Ns,rs,thetas,Drs,R0,nstep){#
	Nseq <- matrix(ncol=length(Drs),nrow=nstep)#
	Nseq[1,] <- init.Ns#
	for(t in 2:nstep){#
		Nseq[t,] <- update(Nseq[t-1,],rs,thetas,Drs,R0)#
	}#
	time <- 1:nstep#
	for(sp in 1:length(Drs)){#
		if(sp==1){#
			plot(Nseq[,sp]~time,col=sp+1,ylim=range(Nseq))#
		}else{#
			points(time,Nseq[,sp],col=sp+1)#
		}#
	}#
	Nseq#
}#
#
update <- function(init.Ns,rs,thetas,Drs,R0){#
	Rm <- sum((rs+1)*init.Ns*thetas)#
	Rr <- Rm*R0/(Rm+R0)#
	gs <- MERA.growth(init.Ns,thetas,Drs,Rr)#
	init.Ns*(1+gs)#
}#
#
MERA.growth <- function(Ns,thetas,Drs,R0){## growth function #
	PR <- Ns^Drs#
	(R0 * PR/sum(PR)/thetas - Ns)/Ns#
}#
#
MERA.SSN <- function(thetas,Drs,R0){#
	C <- get.C(thetas,Drs,R0) #
	(C*thetas)^(1/(Drs-1))#
}#
#
get.C <- function(thetas,Drs,R0){#
	init.C <- (R0/sum(thetas^(Drs/(Drs-1))))^(mean(Drs)-1)#
	C <- nleqslv(init.C,constraint,thetas=thetas,Drs=Drs,R0=R0)#
	if(C[[3]]!=1){#
		print(C[[4]])#
	}#
	C[[1]]#
} #
#
constraint <- function(C,thetas,Drs,R0){#
	R0 - sum(C^(1/(Drs-1))*thetas^(Drs/(Drs-1)))#
}
init.Ns <- c(1,1,2)#
rs <- c(0.1,0.5,0.1)#
thetas <- c(1,1,1)#
Drs <- c(0.1,0,1,0.1)#
R0 <- 100#
nstep <- 20
multi_competitor(init.Ns,rs,thetas,Drs,R0,nstep)
Nseq <- matrix(ncol=length(Drs),nrow=nstep)
Nseq[1,] <- init.Ns#
	for(t in 2:nstep){#
		Nseq[t,] <- update(Nseq[t-1,],rs,thetas,Drs,R0)#
	}
update(Nseq[t-1,],rs,thetas,Drs,R0)
Drs <- c(0.1,0.1,0.1)
multi_competitor(init.Ns,rs,thetas,Drs,R0,nstep)
thetas <- c(1,2,2)
multi_competitor(init.Ns,rs,thetas,Drs,R0,nstep)
nstep <- 200
multi_competitor(init.Ns,rs,thetas,Drs,R0,nstep)
init.Ns <- c(1,1)#
rs <- c(0.1,0.5)#
thetas <- c(1,2)#
Drs <- c(0.1,0.5)#
R0 <- 100#
nstep <- 200
multi_competitor(init.Ns,rs,thetas,Drs,R0,nstep)
nstep <- 20
multi_competitor(init.Ns,rs,thetas,Drs,R0,nstep)
nstep <- 50
multi_competitor(init.Ns,rs,thetas,Drs,R0,nstep)
rs <- c(1,5)
multi_competitor(init.Ns,rs,thetas,Drs,R0,nstep)
rs <- c(10,50)
multi_competitor(init.Ns,rs,thetas,Drs,R0,nstep)
thetas <- c(1,20)
multi_competitor(init.Ns,rs,thetas,Drs,R0,nstep)
thetas <- c(1,2)
Drs <- c(0.1,0.9)
nstep <- 50
multi_competitor(init.Ns,rs,thetas,Drs,R0,nstep)
init.Ns <- c(100,1)
rs <- c(10,50)
thetas <- c(1,2)
Drs <- c(0.1,0.9)
R0 <- 100
nstep <- 50
multi_competitor(init.Ns,rs,thetas,Drs,R0,nstep)
rs <- c(10,50)#
thetas <- c(1,2)#
Drs <- c(0.1,0.9)#
R0 <- 100#
nstep <- 50
init.Ns <- c(1,1)
multi_competitor(init.Ns,rs,thetas,Drs,R0,nstep)
nstep <- 5
multi_competitor(init.Ns,rs,thetas,Drs,R0,nstep)
rs <- c(100,500)
multi_competitor(init.Ns,rs,thetas,Drs,R0,nstep)
nstep <- 10
multi_competitor(init.Ns,rs,thetas,Drs,R0,nstep)
init.Ns <- c(1,10)
multi_competitor(init.Ns,rs,thetas,Drs,R0,nstep)
init.Ns <- c(1,1)
multi_competitor(init.Ns,rs,thetas,Drs,R0,nstep)
rs <- c(100,50)
multi_competitor(init.Ns,rs,thetas,Drs,R0,nstep)
init.Ns <- c(10,10)#
rs <- c(100,50)#
thetas <- c(1,2)#
Drs <- c(0.1,0.9)#
R0 <- 100#
nstep <- 10#
#
multi_competitor(init.Ns,rs,thetas,Drs,R0,nstep)
init.Ns <- c(20,10)#
rs <- c(100,50)#
thetas <- c(1,3)#
Drs <- c(0.1,0.9)#
R0 <- 100#
nstep <- 10#
#
multi_competitor(init.Ns,rs,thetas,Drs,R0,nstep)
init.Ns <- c(5,10)
multi_competitor(init.Ns,rs,thetas,Drs,R0,nstep)
init.Ns <- c(5,10,20)#
rs <- c(100,50,100)#
thetas <- c(1,3,5)#
Drs <- c(0.1,0.5,0.9)#
R0 <- 100#
nstep <- 10#
#
multi_competitor(init.Ns,rs,thetas,Drs,R0,nstep)
Ns
PR <- Ns
PR
multi_competitor <- function(init.Ns,rs,thetas,Drs,R0,nstep){#
	Nseq <- matrix(ncol=length(Drs),nrow=nstep)#
	Nseq[1,] <- init.Ns#
	for(t in 2:nstep){#
		Nseq[t,] <- update(Nseq[t-1,],rs,thetas,Drs,R0)#
	}#
	time <- 1:nstep#
	for(sp in 1:length(Drs)){#
		if(sp==1){#
			plot(Nseq[,sp]~time,col=sp+1,ylim=range(Nseq))#
		}else{#
			points(time,Nseq[,sp],col=sp+1)#
		}#
	}#
	Nseq#
}#
#
update <- function(init.Ns,rs,thetas,Drs,R0){#
	Rm <- sum((rs+1)*init.Ns*thetas)#
	Rr <- Rm*R0/(Rm+R0)#
	gs <- MERA.growth(init.Ns,thetas,Drs,Rr)#
	init.Ns*(1+gs)#
}#
#
MERA.growth <- function(Ns,thetas,Drs,R0){## growth function #
	PR <- Ns^(Drs)#
	(R0 * PR/sum(PR)/thetas - Ns)/Ns#
}
init.Ns <- c(5,10,20)#
rs <- c(100,50,100)#
thetas <- c(1,3,5)#
Drs <- c(0.1,0.5,0.9)#
R0 <- 100#
nstep <- 10#
#
multi_competitor(init.Ns,rs,thetas,Drs,R0,nstep)
init.Ns <- c(5,10,10)
multi_competitor(init.Ns,rs,thetas,Drs,R0,nstep)
init.Ns <- c(5,10,20)#
rs <- c(100,100,100)#
thetas <- c(1,1,1)#
Drs <- c(0.1,0.1,0.1)#
R0 <- 100#
nstep <- 10#
#
multi_competitor(init.Ns,rs,thetas,Drs,R0,nstep)
thetas
Drs
rs
init.Ns <- c(5,10,20)#
rs <- c(100,100,100)#
thetas <- c(1,1,1)#
Drs <- c(0.9,0.9,0.9)#
R0 <- 100#
nstep <- 10#
#
multi_competitor(init.Ns,rs,thetas,Drs,R0,nstep)
init.Ns <- c(5,10,20)#
rs <- c(100,100,100)#
thetas <- c(3,2,1)#
Drs <- c(0.9,0.5,0.1)#
R0 <- 100#
nstep <- 10#
#
multi_competitor(init.Ns,rs,thetas,Drs,R0,nstep)
init.Ns <- round(rnorm(30,100,10))#
rs <- rep(100,30)#
thetas <- rnorm(30,5,2)#
Drs <- rep(0.5,30)#
R0 <- 1000#
nstep <- 100
multi_competitor(init.Ns,rs,thetas,Drs,R0,nstep)
R0 <- 10000
multi_competitor(init.Ns,rs,thetas,Drs,R0,nstep)
Drs <- rep(2,30)
multi_competitor(init.Ns,rs,thetas,Drs,R0,nstep)
Drs <- rep(1,30)
multi_competitor(init.Ns,rs,thetas,Drs,R0,nstep)
Drs <- rep(0.9,30)
multi_competitor(init.Ns,rs,thetas,Drs,R0,nstep)
init.Ns <- round(rnorm(10,100,10))#
rs <- rep(100,10)#
thetas <- rnorm(10,5,2)#
Drs <- rep(0.9,10)#
R0 <- 10000#
nstep <- 100#
#
multi_competitor(init.Ns,rs,thetas,Drs,R0,nstep)
Drs <- runif(10,0,1)
multi_competitor(init.Ns,rs,thetas,Drs,R0,nstep)
Drs <- runif(10,0.7,1)
multi_competitor(init.Ns,rs,thetas,Drs,R0,nstep)
Drs <- runif(10,0.7,1)
multi_competitor(init.Ns,rs,thetas,Drs,R0,nstep)
library(nleqslv)#
multi_integrated_lag <- function(init.Ns0,init.Ns1,thetas,Drs,rs,R0,nstep){#
	Nseq <- matrix(nrow=nstep,ncol=length(thetas))#
	Nseq[1,] <- init.Ns0#
	Nseq[2,] <- init.Ns1#
	for(i in 3:nstep){#
		Nseq[i,] <- multi_growth((Nseq[i-1,]*0.2+Nseq[i-2,]*0.8),thetas,Drs,rs,R0)#
	}#
	time <- 1:nstep#
	for(sp in 1:length(Drs)){#
		if(sp==1){#
			plot(Nseq[,sp]~time,col=sp+1,ylim=range(Nseq),ylab="abundance")#
		}else{#
			points(time,Nseq[,sp],col=sp+1)#
		}#
		lines(time,Nseq[,sp],col=sp+1)#
	}#
	Nseq#
}#
multi_integrated <- function(init.Ns0,thetas,Drs,rs,R0,nstep){#
	Nseq <- matrix(nrow=nstep,ncol=length(thetas))#
	Nseq[1,] <- init.Ns0#
	for(i in 2:nstep){#
		Nseq[i,] <- multi_growth(Nseq[i-1,],thetas,Drs,rs,R0)#
	}#
	time <- 1:nstep#
	for(sp in 1:length(Drs)){#
		if(sp==1){#
			plot(Nseq[,sp]~time,col=sp+1,ylim=range(Nseq),ylab="abundance")#
		}else{#
			points(time,Nseq[,sp],col=sp+1)#
		}#
		lines(time,Nseq[,sp],col=sp+1)#
	}#
	Nseq#
}#
#
multi_predator_1prey <- function(inits,thetas,Drs,rs,R0,nstep){#
	Nseq <- matrix(nrow=nstep,ncol=length(thetas))#
	Nseq[1,] <- inits#
	for(t in 2:nstep){#
		Nseq[t,-1] <- multi_growth(Nseq[t-1,-1],thetas[-1],Drs[-1],rs[-1],Nseq[t-1,1]*thetas[1])#
		Nseq[t,1] <- multi_growth(Nseq[t-1,1],thetas[1],Drs[1],rs[1],R0)- sum(Nseq[t-1,-1]*thetas[-1])/thetas[1]	 #time lag#
		#Nseq[t,1] <- multi_growth(Nseq[t-1,1],thetas[1],Drs[1],rs[1],R0)- sum(Nseq[t,-1]*thetas[-1])/thetas[1]	#No time lag#
	} #
	time <- 1: nstep#
	plot(Nseq[,1]~time,col=1,ylim=range(Nseq),ylab="abundance")#
	lines(time,Nseq[,1],col=1)#
	for(i in 2:dim(Nseq)[2]){#
		points(time,Nseq[,i],col=i)#
		lines(time,Nseq[,i],col=i)#
	}#
	#legend("bottomright",c("prey",paste("predator",1:(dim(Nseq)[2]-1))),col=1:length(thetas),pch=1,lty=1)#
	Nseq#
}#
#
multi_growth <- function(Ns,thetas,Drs,rs,R0){#
	Cs <- (rs+1)*Ns*thetas#
	NDs <- Ns^Drs#
	Rs.init <- NDs/sum(NDs)*R0*sum(Cs)/(R0+sum(Cs))#
	Rs <- nleqslv(Rs.init,dynamic_constraints,NDs=NDs,Cs=Cs,R0=R0)#
	if(Rs[[3]]!=1){#
		print(Rs[[4]])#
	}#
	Rs <- Rs[[1]]#
	Rs/thetas#
}#
#
dynamic_constraints <- function(Rs,NDs,Cs,R0){#
	Rs^2 - (Cs-Rs)*(R0-sum(Rs))*NDs#
}#
#
get_SSN <- function(thetas,Drs,rs,R0){#
	Ru.init <- (sum((thetas/rs)^(1/(Drs-1))*thetas)/R0)^(mean(Drs)-1)#
	Ru <- nleqslv(Ru.init,SS_constraint,thetas=thetas,Drs=Drs,rs=rs,R0=R0)#
	if(Ru[[3]]!=1){#
		print(Ru[[4]])#
	}#
	Ru <- Ru[[1]]#
	(thetas/rs/Ru)^(1/(Drs-1))#
}#
#
SS_constraint <- function(Ru,thetas,Drs,rs,R0){#
	R0-Ru-sum((thetas/rs/Ru)^(1/(Drs-1))*thetas)#
}
multi_integrated(5,1,0,1,100,20)
multi_integrated(5,1,1,1,100,20)
logi_growth <- function(init,r,SSN,nstep){#
	Nseq <- numeric(nstep)#
	Nseq[1] = init#
	for(i in 2:nstep){#
		Nseq[i] = Nseq[i-1]*(1+ r* (1-Nseq[i-1]/SSN))#
	}#
	time <- 1:nstep#
	points(time,Nseq)#
}
logi_growth(5,r=1,SSN=100,nstep=20)
legend("bottomright",c("MERA","logistic"),pch=1,col=2:1)
multi_integrated_lag <- function(init.Ns0,init.Ns1,thetas,Drs,rs,R0,nstep){#
	Nseq <- matrix(nrow=nstep,ncol=length(thetas))#
	Nseq[1,] <- init.Ns0#
	Nseq[2,] <- init.Ns1#
	for(i in 3:nstep){#
		Nseq[i,] <- multi_growth((Nseq[i-1,]*0.2+Nseq[i-2,]*0.8),thetas,Drs,rs,R0)#
	}#
	time <- 1:nstep#
	for(sp in 1:length(Drs)){#
		if(sp==1){#
			plot(Nseq[,sp]~time,col=sp+1,ylim=range(Nseq),ylab="abundance",xlab=paste("time (Dr=",Drs[1],")"))#
		}else{#
			points(time,Nseq[,sp],col=sp+1)#
		}#
		lines(time,Nseq[,sp],col=sp+1)#
	}#
	Nseq#
}
multi_integrated(init.Ns,thetas,Drs,rs,R0,nstep)
nstep
multi_integrated(init.Ns=5,thetas=1,Drs=1,rs=1,R0=100,nstep=20)
multi_integrated <- function(init.Ns0,thetas,Drs,rs,R0,nstep){#
	Nseq <- matrix(nrow=nstep,ncol=length(thetas))#
	Nseq[1,] <- init.Ns0#
	for(i in 2:nstep){#
		Nseq[i,] <- multi_growth(Nseq[i-1,],thetas,Drs,rs,R0)#
	}#
	time <- 1:nstep#
	for(sp in 1:length(Drs)){#
		if(sp==1){#
			plot(Nseq[,sp]~time,col=sp+1,ylim=range(Nseq),ylab="abundance",xlab=paste("time (Dr=",Drs[1],")"))#
		}else{#
			points(time,Nseq[,sp],col=sp+1)#
		}#
		lines(time,Nseq[,sp],col=sp+1)#
	}#
	Nseq#
}
multi_integrated(init.Ns=5,thetas=1,Drs=1,rs=1,R0=100,nstep=20)
logi_growth(5,r=1,SSN=100,nstep=20)
legend("bottomright",c("MERA","logistic"),pch=1,col=2:1)
par(mfrow=c(1,2))
multi_integrated(init.Ns=5,thetas=1,Drs=0,rs=1,R0=100,nstep=20)
logi_growth(5,r=1,SSN=50,nstep=20)
legend("bottomright",c("MERA","logistic"),pch=1,col=2:1)
multi_integrated(init.Ns=5,thetas=1,Drs=1,rs=1,R0=100,nstep=20)
logi_growth(5,r=1,SSN=100,nstep=20)
legend("bottomright",c("MERA","logistic"),pch=1,col=2:1)
multi_integrated(init.Ns=5,thetas=1,Drs=0.5,rs=1,R0=100,nstep=20)
logi_growth(5,r=1,SSN=90.5,nstep=20)
multi_integrated(init.Ns=5,thetas=1,Drs=0.1,rs=1,R0=100,nstep=20)
logi_growth(5,r=1,SSN=60.1,nstep=20)
par(mfrow=c(2,2))
multi_integrated(init.Ns=5,thetas=1,Drs=0,rs=1,R0=100,nstep=20)
logi_growth(5,r=1,SSN=50,nstep=20)
legend("bottomright",c("MERA","logistic"),pch=1,col=2:1)
multi_integrated(init.Ns=5,thetas=1,Drs=1,rs=1,R0=100,nstep=20)
logi_growth(5,r=1,SSN=99,nstep=20)
legend("bottomright",c("MERA","logistic"),pch=1,col=2:1)
multi_integrated(init.Ns=5,thetas=1,Drs=0.5,rs=1,R0=100,nstep=20)
logi_growth(5,r=1,SSN=90.48,nstep=20)
legend("bottomright",c("MERA","logistic"),pch=1,col=2:1)

growth_1sp(10,r=2,theta_seq=1,Dr_seq=0.6,R=100,nstep=30)
growth_1sp(10,r=0.1,theta_seq=1,Dr_seq=0.6,R=100,nstep=30)
growth_1sp(10,r=0.5,theta_seq=1,Dr_seq=0.6,R=100,nstep=30)
growth_1sp <- function(init.Ns,r=2,theta_seq,Dr_seq,R,nstep){#
	SSN <- get_SSN(theta_seq,Dr_seq,R)#
	N_seq <- init.Ns#
	N_mat <- matrix(nrow=nstep,ncol=length(init.Ns))#
	for(t in 1:nstep){#
		N_mat[t,] <- N_seq#
		R_avail <- min(r*sum(N_seq)^2,R)## total resource available grows linearly to the total resource already obtained#
		G <- MERA_growth(N_seq,theta_seq,Dr_seq,R_avail)#
		N_seq <- N_seq+ G#
	}#
	plot(N_mat[,1],xlab="time",ylab="abundance",ylim=range(N_mat))#
	if(length(init.Ns)>1){#
		for(i in 2:length(init.Ns)){#
		points(N_mat[,i],col=i)#
		}	#
	}#
	N_mat#
}
growth_1sp(10,r=0.5,theta_seq=1,Dr_seq=0.6,R=100,nstep=30)
growth_1sp <- function(init.Ns,r=2,theta_seq,Dr_seq,R,nstep){#
	SSN <- get_SSN(theta_seq,Dr_seq,R)#
	N_seq <- init.Ns#
	N_mat <- matrix(nrow=nstep,ncol=length(init.Ns))#
	for(t in 1:nstep){#
		N_mat[t,] <- N_seq#
		R_avail <- min(r*sum(N_seq)^2,R)## total resource available grows linearly to the total resource already obtained#
		G <- MERA_growth(N_seq,theta_seq,Dr_seq,R_avail)#
		N_seq <- N_seq+ G#
	}#
	plot(N_mat[,1],xlab="time",ylab="abundance",ylim=range(N_mat))#
	if(length(init.Ns)>1){#
		for(i in 2:length(init.Ns)){#
		points(N_mat[,i],col=i)#
		}	#
	}#
	N_mat#
}
growth_1sp(10,r=0.5,theta_seq=1,Dr_seq=0.6,R=100,nstep=30)
growth_1sp(10,r=0.1,theta_seq=1,Dr_seq=0.6,R=100,nstep=30)
growth_1sp(10,r=1,theta_seq=1,Dr_seq=0.6,R=100,nstep=30)
growth_1sp(10,r=0.6,theta_seq=1,Dr_seq=0.6,R=100,nstep=30)
growth_1sp <- function(init.Ns,r,theta_seq,Dr_seq,R,nstep){#
	SSN <- get_SSN(theta_seq,Dr_seq,R)#
	N_seq <- init.Ns#
	N_mat <- matrix(nrow=nstep,ncol=length(init.Ns))#
	for(t in 1:nstep){#
		N_mat[t,] <- N_seq#
		potentials <- r*N_seq#
		G <- MERA_growth(N_seq,theta_seq,Dr_seq,R)#
		for(i in 1:length(init.Ns)){#
			N_seq[i] <- N_seq[i]+ min(potentials[i],G[i])#
		}#
	}#
	plot(N_mat[,1],xlab="time",ylab="abundance",ylim=range(N_mat))#
	if(length(init.Ns)>1){#
		for(i in 2:length(init.Ns)){#
		points(N_mat[,i],col=i)#
		}	#
	}#
	N_mat#
}
growth_1sp(10,r=0.5,theta_seq=1,Dr_seq=0.6,R=100,nstep=30)
growth_1sp(10,r=0.2,theta_seq=1,Dr_seq=0.6,R=100,nstep=30)
growth_1sp(10,r=0.1,theta_seq=1,Dr_seq=0.6,R=100,nstep=30)
growth_1sp(10,r=0.1,theta_seq=1,Dr_seq=1,R=100,nstep=30)
growth_1sp(10,r=0.1,theta_seq=1,Dr_seq=0,R=100,nstep=30)
growth_1sp(init.Ns=c(1,1,1),r=1.5,theta_seq,Dr_seq,R=100,nstep=50)
Dr_seq <- c(0.1,0.1,0.5)
growth_1sp(init.Ns=c(1,1,1),r=1.5,theta_seq,Dr_seq,R=100,nstep=50)
growth_1sp(init.Ns=c(5,1,10),r=1.5,theta_seq,Dr_seq,R=100,nstep=50)
SSN <- get_SSN(theta_seq,Dr_seq,R)
SSN
growth_1sp(10,r=0.01,theta_seq=1,Dr_seq=0.3,R=100,nstep=30)
growth_1sp(10,r=0.1,theta_seq=1,Dr_seq=0.3,R=100,nstep=30)
growth_1sp(10,r=0.05,theta_seq=1,Dr_seq=0.3,R=100,nstep=30)
growth_1sp
growth_1sp <- function(init.Ns,r=2,theta_seq,Dr_seq,R,nstep){#
	SSN <- get_SSN(theta_seq,Dr_seq,R)#
	N_seq <- init.Ns#
	N_mat <- matrix(nrow=nstep,ncol=length(init.Ns))#
	for(t in 1:nstep){#
		N_mat[t,] <- N_seq#
		R_avail <- min(r*sum(N_seq)^2,R)## total resource available grows linearly to the total resource already obtained#
		G <- MERA_growth(N_seq,theta_seq,Dr_seq,R_avail)#
		N_seq <- N_seq+ G#
	}#
	plot(N_mat[,1],xlab="time",ylab="abundance",ylim=range(N_mat))#
	if(length(init.Ns)>1){#
		for(i in 2:length(init.Ns)){#
		points(N_mat[,i],col=i)#
		}	#
	}#
	N_mat#
}
growth_1sp(10,r=0.05,theta_seq=1,Dr_seq=0.3,R=100,nstep=30)
growth_1sp(10,r=1,theta_seq=1,Dr_seq=0.3,R=100,nstep=30)
growth_1sp(10,r=0.5,theta_seq=1,Dr_seq=0.3,R=100,nstep=30)
growth_1sp(10,r=0.3,theta_seq=1,Dr_seq=0.3,R=100,nstep=30)
growth_1sp(10,r=0.2,theta_seq=1,Dr_seq=0.3,R=100,nstep=30)
growth_1sp(10,r=0.1,theta_seq=1,Dr_seq=0.3,R=100,nstep=30)
growth_1sp(10,r=0.15,theta_seq=1,Dr_seq=0.3,R=100,nstep=30)
growth_1sp(10,r=0.2,theta_seq=1,Dr_seq=0.3,R=100,nstep=30)
growth_1sp(10,r=0.15,theta_seq=1,Dr_seq=0.3,R=100,nstep=30)
growth_1sp(20,r=0.15,theta_seq=1,Dr_seq=0.3,R=100,nstep=30)
growth_1sp(15,r=0.15,theta_seq=1,Dr_seq=0.3,R=100,nstep=30)
growth_1sp(13,r=0.15,theta_seq=1,Dr_seq=0.3,R=100,nstep=30)
growth_1sp(12,r=0.15,theta_seq=1,Dr_seq=0.3,R=100,nstep=30)
growth_1sp(11,r=0.15,theta_seq=1,Dr_seq=0.3,R=100,nstep=30)
growth_1sp(10,r=0.15,theta_seq=1,Dr_seq=0.3,R=100,nstep=30)
growth_1sp(11,r=0.15,theta_seq=1,Dr_seq=0.3,R=100,nstep=30)
growth_1sp(10,r=0.15,theta_seq=1,Dr_seq=0.3,R=100,nstep=30)
growth_1sp(9,r=0.15,theta_seq=1,Dr_seq=0.3,R=100,nstep=30)
growth_1sp(10,r=0.15,theta_seq=1,Dr_seq=0.3,R=100,nstep=30)
growth_1sp(11,r=0.15,theta_seq=1,Dr_seq=0.3,R=100,nstep=30)
growth_1sp(12,r=0.15,theta_seq=1,Dr_seq=0.3,R=100,nstep=30)
solve.sameDr <- function(theta_seq,Dr,R){#
	base <- sum(theta_seq^(Dr/(Dr-1)))#
	R* theta_seq^(1/(Dr-1))/base#
}
source("MERA_SSN.R")
## MERA competition model#
library(nleqslv)#
#
solve.sameDr <- function(theta_seq,Dr,R){#
	base <- sum(theta_seq^(Dr/(Dr-1)))#
	R* theta_seq^(1/(Dr-1))/base#
}#
#
solve.analytical <- function(theta_seq,Dr_seq,R,r){##given r solve for N+g; r=1 is the special case for equilibrium where N+g=Ne#
	if(length(theta_seq)==1){#
		sol <- R/theta_seq[1]#
	}#
	r_seq <- c(r,rep(1,length(theta_seq)-length(r)))#
	C <- get.C(theta_seq,Dr_seq,R,r_seq)#
	sol <- analytical.sol(C,theta_seq,Dr_seq,r_seq)#
	sol#
}#
#
analytical.sol <- function(C,theta_seq,Dr_seq,r_seq){#
	2/exp(1)*(C*theta_seq*r_seq^(0.5/theta_seq))^(1/(Dr_seq-1))#
}#
#
get.C <- function(theta_seq,Dr_seq,R,r_seq){#
	init.C <- 1/mean(theta_seq)#
	C <- nleqslv(init.C,R_constraint,theta_seq=theta_seq,Dr_seq=Dr_seq,R=R,r_seq=r_seq)#
	if(C[[3]]!=1&&C[[3]]!=2){#
		print(C[[4]])#
	}#
	C[[1]]#
}#
#
R_constraint <- function(C,theta_seq,Dr_seq,R,r_seq){#
	R-sum(theta_seq*analytical.sol(C,theta_seq,Dr_seq,r_seq))#
}#
#
steady.state.mR <- function(Sp_mat,R_mat,combine=T){#
	SSN_mat <- matrix(ncol=dim(R_mat)[1],nrow=dim(Sp_mat)[1])#
	for(i in 1:dim(R_mat)[1]){#
		SSN_mat[,i] <- solve.analytical(Sp_mat[,1]/R_mat[i,2],Sp_mat[,2],R_mat[i,1],1)#
	}#
	rownames(SSN_mat) <- paste("Sp",1:dim(SSN_mat)[1])#
	colnames(SSN_mat) <- paste("R",1:dim(SSN_mat)[2])#
	if(combine){#
		SSN_mat <- rowSums(SSN_mat)#
	}#
	SSN_mat#
}
theta_seq=c(1,2,3)
Dr=0.5
R=100
Dr_seq=rep(Dr,3)
solve.analytical(theta_seq,Dr_seq,R,1)
solve.sameDr(theta_seq,Dr,R)
get.C
## MERA competition model#
library(nleqslv)#
#
solve.sameDr <- function(theta_seq,Dr,R){#
	base <- sum(theta_seq^(Dr/(Dr-1)))#
	R* theta_seq^(1/(Dr-1))/base#
}#
#
solve.analytical <- function(theta_seq,Dr_seq,R,r){##given r solve for N+g; r=1 is the special case for equilibrium where N+g=Ne#
	if(length(theta_seq)==1){#
		sol <- R/theta_seq[1]#
	}else if(sum(Dr_seq!=mean(Dr_seq))==0){#
		sol <- solve.sameDr(theta_seq,Dr_seq[1],R)#
	}else{#
		r_seq <- c(r,rep(1,length(theta_seq)-length(r)))#
		C <- get.C(theta_seq,Dr_seq,R,r_seq)#
		sol <- analytical.sol(C,theta_seq,Dr_seq,r_seq)#
	}#
	sol#
}#
#
analytical.sol <- function(C,theta_seq,Dr_seq,r_seq){#
	2/exp(1)*(C*theta_seq*r_seq^(0.5/theta_seq))^(1/(Dr_seq-1))#
}#
#
get.C <- function(theta_seq,Dr_seq,R,r_seq){#
	init.C <- 1/mean(theta_seq)#
	C <- nleqslv(init.C,R_constraint,theta_seq=theta_seq,Dr_seq=Dr_seq,R=R,r_seq=r_seq)#
	if(C[[3]]!=1&&C[[3]]!=2){#
		print(C[[4]])#
	}#
	C[[1]]#
}#
#
R_constraint <- function(C,theta_seq,Dr_seq,R,r_seq){#
	R-sum(theta_seq*analytical.sol(C,theta_seq,Dr_seq,r_seq))#
}#
#
steady.state.mR <- function(Sp_mat,R_mat,combine=T){#
	SSN_mat <- matrix(ncol=dim(R_mat)[1],nrow=dim(Sp_mat)[1])#
	for(i in 1:dim(R_mat)[1]){#
		SSN_mat[,i] <- solve.analytical(Sp_mat[,1]/R_mat[i,2],Sp_mat[,2],R_mat[i,1],1)#
	}#
	rownames(SSN_mat) <- paste("Sp",1:dim(SSN_mat)[1])#
	colnames(SSN_mat) <- paste("R",1:dim(SSN_mat)[2])#
	if(combine){#
		SSN_mat <- rowSums(SSN_mat)#
	}#
	SSN_mat#
}
basal
library(nleqslv)
?nleqslv
source("1sp_growth.R")
getwd()
setwd("/Users/jadezhang/Documents/2015fall/Research/Unconstrained_MERA")
getwd()
source("1sp_growth.R")
R0 <- 1000#
Dr_seq <- c(0,0.5,1)#
theta <- 1#
r <- 1
SSN <- solve_SSN(R0,Dr,theta)
Dr=0
SSN <- solve_SSN(R0,Dr,theta)
SSN
source("1sp_growth.R")
SSN <- solve_SSN(R0,Dr,theta)
SSN
R0/theta
Dr=1
SSN <- solve_SSN(R0,Dr,theta)
SSN
Dr=0.5
SSN <- solve_SSN(R0,Dr,theta)
SSN
Dr=0.3
SSN <- solve_SSN(R0,Dr,theta)
SSN
Dr=0.1
SSN <- solve_SSN(R0,Dr,theta)
SSN
Dr_seq <- c(0,0.1,1)
i=1
plot_growth(SSN,r,R0,Dr_seq[i],theta)
SSN
SSN <- solve_SSN(R0,Dr_seq[i],theta)
SSN
plot_growth(SSN,r,R0,Dr_seq[i],theta)
plot_dynamic(SSN,r,R0,Dr_seq[i],theta)
N_seq <- seq(1,200,length=50)
g_seq <- unlist(lapply(N_seq,single_growth,r=r,R0=R0,Dr=Dr,theta=theta))
Dr
Dr=0
g_seq <- unlist(lapply(N_seq,single_growth,r=r,R0=R0,Dr=Dr,theta=theta))
single_growth
r <- 5
g_seq <- unlist(lapply(N_seq,single_growth,r=r,R0=R0,Dr=Dr,theta=theta))
g_seq
plot_growth(SSN,r,R0,Dr_seq[i],theta)
i=2
SSN <- solve_SSN(R0,Dr_seq[i],theta)
SSN
plot_growth(SSN,r,R0,Dr_seq[i],theta,ng=i,comp=F)
i=3
SSN <- solve_SSN(R0,Dr_seq[i],theta)
plot_growth(SSN,r,R0,Dr_seq[i],theta,ng=i,comp=F)
plot_growth(SSN,r,R0,Dr_seq[i],theta)
Dr=1
SSN
g_seq <- unlist(lapply(N_seq,single_growth,r=r,R0=R0,Dr=Dr,theta=theta))
g_seq
N_seq <- seq(1,800,length=50)#
	g_seq <- unlist(lapply(N_seq,single_growth,r=r,R0=R0,Dr=Dr,theta=theta))
g_seq
source("1sp_growth.R")
plot_growth(SSN,r,R0,Dr_seq[i],theta)
for(i in 1:length(Dr_seq)){#
		SSN <- solve_SSN(R0,Dr_seq[i],theta)#
		if(i ==1){#
			plot_growth(SSN,r,R0,Dr_seq[i],theta)#
		}else{#
			plot_growth(SSN,r,R0,Dr_seq[i],theta,ng=i,comp=F)#
		}	#
	}
Dr_seq <- c(1,0.1,0)
for(i in 1:length(Dr_seq)){#
		SSN <- solve_SSN(R0,Dr_seq[i],theta)#
		if(i ==1){#
			plot_growth(SSN,r,R0,Dr_seq[i],theta)#
		}else{#
			plot_growth(SSN,r,R0,Dr_seq[i],theta,ng=i,comp=F)#
		}	#
	}
source("1sp_growth.R")
i=1
plot_dynamic(SSN,r,R0,Dr_seq[i],theta)
SSN <- solve_SSN(R0,Dr_seq[i],theta)
SSN
plot_dynamic(SSN,r,R0,Dr_seq[i],theta)
Dr=1
Dr=0
N <- 1#
	N_seq <- N#
	t <- 1
while (t <100){#
		N <- N*(1+single_growth(r,R0,N,Dr,theta))#
		N_seq <- c(N_seq,N)#
		t <- t+1#
	}
N_seq
plot(N_seq~(1:100),xlab="time",ylab="abundance N",col=2,pch=16)
length(N_seq)
time <- (1:100)
plot(N_seq~time,xlab="time",ylab="abundance N",col=2,pch=16)
source("1sp_growth.R")
for(i in 1:length(Dr_seq)){#
		SSN <- solve_SSN(R0,Dr_seq[i],theta)#
		if(i ==1){#
			plot_dynamic(SSN,r,R0,Dr_seq[i],theta)#
		}else{#
			plot_dynamic(SSN,r,R0,Dr_seq[i],theta,ng=i,comp=F)#
		}	#
	}
source("1sp_growth.R")
for(i in 1:length(Dr_seq)){#
		SSN <- solve_SSN(R0,Dr_seq[i],theta)#
		if(i ==1){#
			plot_dynamic(SSN,r,R0,Dr_seq[i],theta)#
		}else{#
			plot_dynamic(SSN,r,R0,Dr_seq[i],theta,ng=i,comp=F)#
		}	#
	}
r <- 2
for(i in 1:length(Dr_seq)){#
		SSN <- solve_SSN(R0,Dr_seq[i],theta)#
		if(i ==1){#
			plot_growth(SSN,r,R0,Dr_seq[i],theta)#
		}else{#
			plot_growth(SSN,r,R0,Dr_seq[i],theta,ng=i,comp=F)#
		}	#
	}
r <- 3
for(i in 1:length(Dr_seq)){#
		SSN <- solve_SSN(R0,Dr_seq[i],theta)#
		if(i ==1){#
			plot_growth(SSN,r,R0,Dr_seq[i],theta)#
		}else{#
			plot_growth(SSN,r,R0,Dr_seq[i],theta,ng=i,comp=F)#
		}	#
	}
for(i in 1:length(Dr_seq)){#
		SSN <- solve_SSN(R0,Dr_seq[i],theta)#
		if(i ==1){#
			plot_dynamic(SSN,r,R0,Dr_seq[i],theta)#
		}else{#
			plot_dynamic(SSN,r,R0,Dr_seq[i],theta,ng=i,comp=F)#
		}	#
	}
r <- 2.5
for(i in 1:length(Dr_seq)){#
		SSN <- solve_SSN(R0,Dr_seq[i],theta)#
		if(i ==1){#
			plot_dynamic(SSN,r,R0,Dr_seq[i],theta)#
		}else{#
			plot_dynamic(SSN,r,R0,Dr_seq[i],theta,ng=i,comp=F)#
		}	#
	}
for(i in 1:length(Dr_seq)){
legend("bottomright",c(paste("Dr=",Dr_seq),"logistic growth"),pch=16,col=c(1:length(Dr_seq)+1,1))
r <- 2.1
for(i in 1:length(Dr_seq)){#
		SSN <- solve_SSN(R0,Dr_seq[i],theta)#
		if(i ==1){#
			plot_dynamic(SSN,r,R0,Dr_seq[i],theta)#
		}else{#
			plot_dynamic(SSN,r,R0,Dr_seq[i],theta,ng=i,comp=F)#
		}	#
	}
for(i in 1:length(Dr_seq)){#
		SSN <- solve_SSN(R0,Dr_seq[i],theta)#
		if(i ==1){#
			plot_growth(SSN,r,R0,Dr_seq[i],theta)#
		}else{#
			plot_growth(SSN,r,R0,Dr_seq[i],theta,ng=i,comp=F)#
		}	#
	}
Dr_seq=0
source("1sp_growth.R")
growth_function(r,R0,Dr_seq,theta)
r <- 2.5
growth_function(r,R0,Dr_seq,theta)
r <- 10
growth_function(r,R0,Dr_seq,theta)
r <- 5
growth_function(r,R0,Dr_seq,theta)
r <- 3
growth_function(r,R0,Dr_seq,theta)
source("1sp_growth.R")
growth_function(r,R0,Dr_seq,theta,nstep=50)
r <- 1.5
growth_function(r,R0,Dr_seq,theta,nstep=50)
r <- 2
growth_function(r,R0,Dr_seq,theta,nstep=50)
r <- 2.1
growth_function(r,R0,Dr_seq,theta,nstep=50)
r <- 2.2
growth_function(r,R0,Dr_seq,theta,nstep=50)
r <- 2.5
growth_function(r,R0,Dr_seq,theta,nstep=50)
Dr_seq=0.1
growth_function(r,R0,Dr_seq,theta,nstep=50)
Dr_seq=0
growth_function(r,R0,Dr_seq,theta,nstep=50)
r <- 1.5
growth_function(r,R0,Dr_seq,theta,nstep=50)
for(i in 1:length(Dr_seq)){#
		SSN <- solve_SSN(R0,Dr_seq[i],theta)#
		if(i ==1){#
			plot_growth(SSN,r,R0,Dr_seq[i],theta)#
		}else{#
			plot_growth(SSN,r,R0,Dr_seq[i],theta,ng=i)#
		}
}
for(i in 1:length(Dr_seq)){#
		SSN <- solve_SSN(R0,Dr_seq[i],theta)#
		if(i ==1){#
			plot_dynamic(SSN,r,R0,Dr_seq[i],theta,nstep,comp=F)#
		}else{#
			plot_dynamic(SSN,r,R0,Dr_seq[i],theta,nstep,ng=i,comp=F)#
		}	#
	}
nstep=50
for(i in 1:length(Dr_seq)){#
		SSN <- solve_SSN(R0,Dr_seq[i],theta)#
		if(i ==1){#
			plot_dynamic(SSN,r,R0,Dr_seq[i],theta,nstep,comp=F)#
		}else{#
			plot_dynamic(SSN,r,R0,Dr_seq[i],theta,nstep,ng=i,comp=F)#
		}	#
	}
r
r=1.9
for(i in 1:length(Dr_seq)){#
		SSN <- solve_SSN(R0,Dr_seq[i],theta)#
		if(i ==1){#
			plot_dynamic(SSN,r,R0,Dr_seq[i],theta,nstep,comp=F)#
		}else{#
			plot_dynamic(SSN,r,R0,Dr_seq[i],theta,nstep,ng=i,comp=F)#
		}	#
	}
r=2
for(i in 1:length(Dr_seq)){#
		SSN <- solve_SSN(R0,Dr_seq[i],theta)#
		if(i ==1){#
			plot_dynamic(SSN,r,R0,Dr_seq[i],theta,nstep,comp=F)#
		}else{#
			plot_dynamic(SSN,r,R0,Dr_seq[i],theta,nstep,ng=i,comp=F)#
		}	#
	}
Dr_seq
r=2.1
for(i in 1:length(Dr_seq)){#
		SSN <- solve_SSN(R0,Dr_seq[i],theta)#
		if(i ==1){#
			plot_dynamic(SSN,r,R0,Dr_seq[i],theta,nstep,comp=F)#
		}else{#
			plot_dynamic(SSN,r,R0,Dr_seq[i],theta,nstep,ng=i,comp=F)#
		}	#
	}
nstep=100
for(i in 1:length(Dr_seq)){#
		SSN <- solve_SSN(R0,Dr_seq[i],theta)#
		if(i ==1){#
			plot_dynamic(SSN,r,R0,Dr_seq[i],theta,nstep,comp=F)#
		}else{#
			plot_dynamic(SSN,r,R0,Dr_seq[i],theta,nstep,ng=i,comp=F)#
		}	#
	}
nstep=1000
for(i in 1:length(Dr_seq)){#
		SSN <- solve_SSN(R0,Dr_seq[i],theta)#
		if(i ==1){#
			plot_dynamic(SSN,r,R0,Dr_seq[i],theta,nstep,comp=F)#
		}else{#
			plot_dynamic(SSN,r,R0,Dr_seq[i],theta,nstep,ng=i,comp=F)#
		}	#
	}
nstep=300
for(i in 1:length(Dr_seq)){#
		SSN <- solve_SSN(R0,Dr_seq[i],theta)#
		if(i ==1){#
			plot_dynamic(SSN,r,R0,Dr_seq[i],theta,nstep,comp=F)#
		}else{#
			plot_dynamic(SSN,r,R0,Dr_seq[i],theta,nstep,ng=i,comp=F)#
		}	#
	}
r=10
for(i in 1:length(Dr_seq)){#
		SSN <- solve_SSN(R0,Dr_seq[i],theta)#
		if(i ==1){#
			plot_dynamic(SSN,r,R0,Dr_seq[i],theta,nstep,comp=F)#
		}else{#
			plot_dynamic(SSN,r,R0,Dr_seq[i],theta,nstep,ng=i,comp=F)#
		}	#
	}
nstep=20
for(i in 1:length(Dr_seq)){#
		SSN <- solve_SSN(R0,Dr_seq[i],theta)#
		if(i ==1){#
			plot_dynamic(SSN,r,R0,Dr_seq[i],theta,nstep,comp=F)#
		}else{#
			plot_dynamic(SSN,r,R0,Dr_seq[i],theta,nstep,ng=i,comp=F)#
		}	#
	}
single_growth <- function(r,R0,N,Dr,theta){#
	if(N<sqrt(R0/r)){#
		r*N^(Dr+1)/theta/(N^Dr+1)-1#
	}else{#
		R0*N^(Dr-1)/theta/(N^Dr+1)-1#
	}#
}
for(i in 1:length(Dr_seq)){#
		SSN <- solve_SSN(R0,Dr_seq[i],theta)#
		if(i ==1){#
			plot_dynamic(SSN,r,R0,Dr_seq[i],theta,nstep,comp=F)#
		}else{#
			plot_dynamic(SSN,r,R0,Dr_seq[i],theta,nstep,ng=i,comp=F)#
		}	#
	}
single_growth <- function(r,R0,N,Dr,theta){#
	if(N<R0/r){#
		r*N^Dr/theta/(N^Dr+1)-1#
	}else{#
		R0*N^(Dr-1)/theta/(N^Dr+1)-1#
	}#
}
for(i in 1:length(Dr_seq)){#
		SSN <- solve_SSN(R0,Dr_seq[i],theta)#
		if(i ==1){#
			plot_dynamic(SSN,r,R0,Dr_seq[i],theta,nstep,comp=F)#
		}else{#
			plot_dynamic(SSN,r,R0,Dr_seq[i],theta,nstep,ng=i,comp=F)#
		}	#
	}
single_growth <- function(r,R0,N,Dr,theta){#
	if(N<(R0/r)^2){#
		r*N^(Dr-0.5)/theta/(N^Dr+1)-1#
	}else{#
		R0*N^(Dr-1)/theta/(N^Dr+1)-1#
	}#
}
for(i in 1:length(Dr_seq)){#
		SSN <- solve_SSN(R0,Dr_seq[i],theta)#
		if(i ==1){#
			plot_dynamic(SSN,r,R0,Dr_seq[i],theta,nstep,comp=F)#
		}else{#
			plot_dynamic(SSN,r,R0,Dr_seq[i],theta,nstep,ng=i,comp=F)#
		}	#
	}
r
r=3
for(i in 1:length(Dr_seq)){#
		SSN <- solve_SSN(R0,Dr_seq[i],theta)#
		if(i ==1){#
			plot_dynamic(SSN,r,R0,Dr_seq[i],theta,nstep,comp=F)#
		}else{#
			plot_dynamic(SSN,r,R0,Dr_seq[i],theta,nstep,ng=i,comp=F)#
		}	#
	}
single_growth <- function(r,R0,N,Dr,theta){#
	if(N<sqrt(R0/r)){#
		r*N^(Dr+1)/theta/(N^Dr+1)-1#
	}else{#
		R0*N^(Dr-1)/theta/(N^Dr+1)-1#
	}#
}
for(i in 1:length(Dr_seq)){#
		SSN <- solve_SSN(R0,Dr_seq[i],theta)#
		if(i ==1){#
			plot_dynamic(SSN,r,R0,Dr_seq[i],theta,nstep,comp=F)#
		}else{#
			plot_dynamic(SSN,r,R0,Dr_seq[i],theta,nstep,ng=i,comp=F)#
		}	#
	}
single_growth <- function(r,R0,N,Dr,theta){#
	if(N<R0/r){#
		r*N^Dr/theta/(N^Dr+1)-1#
	}else{#
		R0*N^(Dr-1)/theta/(N^Dr+1)-1#
	}#
}
for(i in 1:length(Dr_seq)){#
		SSN <- solve_SSN(R0,Dr_seq[i],theta)#
		if(i ==1){#
			plot_dynamic(SSN,r,R0,Dr_seq[i],theta,nstep,comp=F)#
		}else{#
			plot_dynamic(SSN,r,R0,Dr_seq[i],theta,nstep,ng=i,comp=F)#
		}	#
	}
nstep=30
for(i in 1:length(Dr_seq)){#
		SSN <- solve_SSN(R0,Dr_seq[i],theta)#
		if(i ==1){#
			plot_dynamic(SSN,r,R0,Dr_seq[i],theta,nstep,comp=F)#
		}else{#
			plot_dynamic(SSN,r,R0,Dr_seq[i],theta,nstep,ng=i,comp=F)#
		}	#
	}
source("1sp_growth.R")
R0 <- 100#
Dr_seq <- c(1,0.1,0)#
theta <- 1#
r <- 1.5#
#
growth_function(r,R0,Dr_seq,theta,nstep=50)
source("1sp_growth.R")
r <- 2.5
growth_function(r,R0,Dr_seq,theta,nstep=50)
source("1sp_growth.R")
growth_function(r,R0,Dr_seq,theta,nstep=50)
r
r <- 3
growth_function(r,R0,Dr_seq,theta,nstep=50)
r <- 2.2
growth_function(r,R0,Dr_seq,theta,nstep=50)
growth_function(r,R0,Dr_seq,theta,nstep=30)
R0 <- 100#
Dr_seq <- c(1,0.1,0)#
theta <- 1#
r <- 4#
#
growth_function(r,R0,Dr_seq,theta,nstep=30)
source("1sp_growth.R")
R0 <- 100#
Dr_seq <- c(1,0.3,0.8,0)#
theta <- 1#
r <- 0.01#
#
growth_function(r,R0,Dr_seq,theta,nstep=30)
source("1sp_growth.R")
R0 <- 100#
Dr_seq <- c(1,0.3,0.8,0)#
theta <- 1#
r <- 0.01#
#
growth_function(r,R0,Dr_seq,theta,nstep=30)
growth_function(r,R0,Dr_seq,theta,nstep=300)
r <- 0.1
growth_function(r,R0,Dr_seq,theta,nstep=300)
r <- 0.5
growth_function(r,R0,Dr_seq,theta,nstep=300)
growth_function(r,R0,Dr_seq,theta,nstep=30)
r <- 1
growth_function(r,R0,Dr_seq,theta,nstep=30)
single_growth <- function(r,R0,N,Dr,theta){##the stock version#
	g <- r*(r*theta*N)(R0-theta*N)/(r*theta*N+R0-theta*N)*(r*N)^(Dr-1)/(theta*((r*N)^Dr+1))#
}
